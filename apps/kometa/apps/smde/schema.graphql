# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
  query: Query
  mutation: Mutation
}

"The `@defer` directive may be provided for fragment spreads and inline fragments to inform the executor to delay the execution of the current fragment to indicate deprioritization of the current fragment. A query with `@defer` directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred is delivered in a subsequent response. `@include` and `@skip` take precedence over `@defer`."
directive @defer(
  "Deferred when true."
  if: Boolean
  "If this argument label has a value other than null, it will be passed on to the result of this defer directive. This label is intended to give client applications a way to identify to which fragment a deferred result belongs to."
  label: String
) on FRAGMENT_SPREAD | INLINE_FRAGMENT

"The `@stream` directive may be provided for a field of `List` type so that the backend can leverage technology such as asynchronous iterators to provide a partial list in the initial response, and additional list items in subsequent responses. `@include` and `@skip` take precedence over `@stream`."
directive @stream(
  "Streamed when true."
  if: Boolean
  "The initial elements that shall be send down to the consumer."
  initialCount: Int! = 0
  "If this argument label has a value other than null, it will be passed on to the result of this stream directive. This label is intended to give client applications a way to identify to which fragment a streamed result belongs to."
  label: String
) on FIELD

"""
The `@oneOf` directive is used within the type system definition language
to indicate:

- an Input Object is a Oneof Input Object, or
- an Object Type's Field is a Oneof Field.
"""
directive @oneOf on INPUT_OBJECT

interface BusinessError {
  code: String
  details: String
  message: String!
}

"Контрагент"
interface Contractor {
  "Реквизиты банковского счета"
  accountBank: AccountBank!
  "Фактический адрес"
  actualAddress: String
  "Адрес"
  address: String!
  creationTime: DateTime
  creator: IdentityUser
  creatorId: ID
  deleter: IdentityUser
  deleterId: ID
  deletionTime: DateTime
  id: ID!
  "ИНН - Индивидуальный номер налогоплательщика"
  inn: String!
  isDeleted: Boolean
  isHost: Boolean!
  lastModificationTime: DateTime
  lastModifier: IdentityUser
  lastModifierId: ID
  "Почтовый адрес"
  mailingAddress: String
  "Наименование"
  name: String!
  "Код ОКПО - Код в Общероссийском классификаторе предприятий и организаций"
  okpo: String
  tenant: Tenant
  tenantId: ID
}

"Контроллер"
interface ControllerBase {
  contractor: Contractor!
  "Ид контрагента"
  contractorId: ID!
  id: ID!
  "Замки"
  locks: [Lock!]!
  "Наименование"
  name: String!
  postamatId: ID!
  "Настройки serial port"
  settings: SerialPortSettings!
  tenant: Tenant
  tenantId: ID
}

"This interface can be implemented to store creation information (who and when created)."
interface CreationAuditedObject {
  creationTime: DateTime
  creator: IdentityUser
  creatorId: ID
}

interface Customer {
  contractor: Contractor!
  "Ид контрагента"
  contractorId: ID!
  creationTime: DateTime
  creator: IdentityUser
  creatorId: ID
  deleter: IdentityUser
  deleterId: ID
  deletionTime: DateTime
  email: String
  externalId: String!
  id: ID!
  isDeleted: Boolean
  lastModificationTime: DateTime
  lastModifier: IdentityUser
  lastModifierId: ID
  name: String!
  phone: String!
  tenant: Tenant
  tenantId: ID
}

"This interface can be implemented to store deletion information (who delete and when deleted)."
interface DeletionAuditedObject {
  deleter: IdentityUser
  deleterId: ID
  deletionTime: DateTime
  isDeleted: Boolean
}

interface Entity {
  id: ID!
}

interface Error {
  message: String!
}

"A standard interface to add CreationTime property."
interface HasCreationTime {
  creationTime: DateTime
}

"A standard interface to add DeletionTime property to a class. It also makes the class soft delete (see ISoftDelete)."
interface HasDeletionTime {
  deletionTime: DateTime
  isDeleted: Boolean
}

"A standard interface to add DeletionTime property to a class."
interface HasModificationTime {
  lastModificationTime: DateTime
}

"Последняя миля"
interface LastMile {
  "Ключи доступа"
  accessKeys: [AccessKey!]!
  "Ид аккаунтов"
  accountIds: LastMileAccountIds!
  "Адрес"
  address: String!
  contractor: Contractor!
  "Ид контрагента"
  contractorId: ID!
  creationTime: DateTime
  creator: IdentityUser
  creatorId: ID
  deleter: IdentityUser
  deleterId: ID
  deletionTime: DateTime
  "Внешний ID"
  externalId: String!
  id: ID!
  isDeleted: Boolean
  lastModificationTime: DateTime
  lastModifier: IdentityUser
  lastModifierId: ID
  "Наименование"
  name: String!
  "Сроки возврата заказов"
  returnPeriods: [LastMileReturnPeriod!]!
  "Смс шаблоны"
  smsTemplates: [LastMileSmsTemplate!]!
  "Статус"
  status: LastMileStatus!
  "Сроки хранения заказов"
  storagePeriods: [LastMileStoragePeriod!]!
  tenant: Tenant
  tenantId: ID
  "Код доступа"
  token: String!
}

"Standard interface for an entity that MAY have a creator."
interface MayHaveCreator {
  creator: IdentityUser
  creatorId: ID
}

"This interface can be implemented to store modification information (who and when modified lastly)."
interface ModificationAuditedObject {
  lastModificationTime: DateTime
  lastModifier: IdentityUser
  lastModifierId: ID
}

interface MultiContractor {
  contractor: Contractor!
  "Ид контрагента"
  contractorId: ID!
}

interface MultiTenant {
  tenant: Tenant
  tenantId: ID
}

"The node interface is implemented by entities that have a global unique identifier."
interface Node {
  id: ID!
}

"Смс аккаунт"
interface SmsAccount {
  contractor: Contractor!
  "Ид контрагента"
  contractorId: ID!
  creationTime: DateTime
  creator: IdentityUser
  creatorId: ID
  deleter: IdentityUser
  deleterId: ID
  deletionTime: DateTime
  id: ID!
  isDeleted: Boolean
  lastModificationTime: DateTime
  lastModifier: IdentityUser
  lastModifierId: ID
  "Наименование аккаунта"
  name: String!
  "Имя отправителя"
  sender: String!
  tenant: Tenant
  tenantId: ID
}

" Used to standardize soft deleting entities. Soft-delete entities are not actually deleted, marked as IsDeleted = true in the database, but can not be retrieved to the application normally."
interface SoftDelete {
  isDeleted: Boolean
}

union ActivateCellError = EntityNotFoundError | ValidationError

union ActivatePostamatError = EntityNotFoundError | ValidationError

union CancelReturnRequestError =
    EntityNotFoundError
  | PackingPlaceIncorrectStatusError
  | ReturnRequestIncorrectStatusError
  | ValidationError

union CancelShipmentRequestError =
    EntityNotFoundError
  | PackingPlaceIncorrectStatusError
  | ShipmentRequestIncorrectStatusError
  | ValidationError

union CreateAccessKeyError = EntityNotFoundError | ValidationError

union CreateCellError =
    CellBarcodeAlreadyExistsError
  | CellNameAlreadyExistsError
  | EntityNotFoundError
  | ValidationError

union CreateCompanyError =
    ContractorInnAlreadyExistsError
  | ContractorNameAlreadyExistsError
  | EntityNotFoundError
  | ValidationError

union CreateEmexAccountError =
    EmexAccountNameAlreadyExistsError
  | EmexAccountUserIdAlreadyExistsError
  | EntityNotFoundError
  | ValidationError

union CreateEmexOrderError =
    EmexOrderCustomerIdIsNotEqualError
  | EmexOrderExternalIdAlreadyExistsError
  | EntityNotFoundError
  | PackingPlaceLockedError
  | TypeOrderIsNotCorrectError
  | ValidationError

union CreateEmexProductError =
    EmexOrderCustomerIdIsNotEqualError
  | EmexOrderLockedError
  | EmexProductLockedError
  | EntityNotFoundError
  | PackingPlaceLockedError
  | TypeOrderIsNotCorrectError
  | ValidationError

union CreateEmployeeError =
    EntityNotFoundError
  | IdentityUserEmailAlreadyExistsError
  | ValidationError

union CreateIdentityRoleError = EntityNotFoundError | ValidationError

union CreateIndividualEntrepreneurError =
    ContractorInnAlreadyExistsError
  | ContractorNameAlreadyExistsError
  | EntityNotFoundError
  | ValidationError

union CreatePackingPlaceError =
    EntityNotFoundError
  | PackingPlaceBarcodeAlreadyExistsError
  | ValidationError

union CreatePostamatError =
    EntityNotFoundError
  | LastMileExternalIdAlreadyExistsError
  | LastMileFactoryNumberAlreadyExistsError
  | LastMileNameAlreadyExistsError
  | ValidationError

union CreatePromixControllerError =
    ControllerNameAlreadyExistsError
  | EntityNotFoundError
  | ValidationError

union CreateReturnRequestError =
    EntityNotFoundError
  | ReturnRequestCodeAlreadyExistsError
  | ReturnRequestLocationNotSpecifiedError
  | ValidationError

union CreateShipmentRequestError =
    EntityNotFoundError
  | ShipmentRequestCodeAlreadyExistsError
  | ValidationError

union CreateSizeError = EntityNotFoundError | SizeNameAlreadyExistsError | ValidationError

union CreateSmsCenterAccountError =
    EntityNotFoundError
  | SmsAccountNameAlreadyExistsError
  | ValidationError

union CreateSmsTemplateError =
    EntityNotFoundError
  | SmsTemplateNameAlreadyExistsError
  | ValidationError

union CreateTemplateCellError =
    EntityNotFoundError
  | TemplateCellNameAlreadyExistsError
  | TemplateCellSizeIdEmptyError
  | ValidationError

union CreateTemplatePostamatError =
    EntityNotFoundError
  | TemplatePostamatNameAlreadyExistsError
  | ValidationError

union CreateTemplateSectionError =
    EntityNotFoundError
  | TemplateSectionNameAlreadyExistsError
  | ValidationError

union CreateTenantError = EntityNotFoundError | TenantNameAlreadyExistsError | ValidationError

union DeactivateCellError = EntityNotFoundError | ValidationError

union DeleteAccessKeyError = EntityNotFoundError | ValidationError

union DeleteCellError = CellDeleteWhenNotEmptyError | EntityNotFoundError | ValidationError

union DeleteCompanyError = ContractorHostDeletionError | EntityNotFoundError | ValidationError

union DeleteEmexAccountError = EntityNotFoundError | ValidationError

union DeleteEmexOrderError = EmexOrderLockedError | EntityNotFoundError | ValidationError

union DeleteEmexProductError =
    EmexOrderLockedError
  | EmexProductLockedError
  | EntityNotFoundError
  | ValidationError

union DeleteEmployeeError = EntityNotFoundError | ValidationError

union DeleteIdentityRoleError = EntityNotFoundError | ValidationError

union DeleteIndividualEntrepreneurError =
    ContractorHostDeletionError
  | EntityNotFoundError
  | ValidationError

union DeleteLastMileSmsTemplateError = EntityNotFoundError | ValidationError

union DeletePackingPlaceError = EntityNotFoundError | PackingPlaceLockedError | ValidationError

union DeletePostamatError = EntityNotFoundError | ValidationError

union DeletePromixControllerError = EntityNotFoundError | ValidationError

union DeleteReturnRequestError = EntityNotFoundError | ReturnRequestLockedError | ValidationError

union DeleteShipmentRequestError =
    EntityNotFoundError
  | ShipmentRequestLockedError
  | ValidationError

union DeleteSizeError = EntityNotFoundError | ValidationError

union DeleteSmsCenterAccountError = EntityNotFoundError | ValidationError

union DeleteSmsTemplateError = EntityNotFoundError | ValidationError

union DeleteTemplateCellError = EntityNotFoundError | ValidationError

union DeleteTemplatePostamatError = EntityNotFoundError | ValidationError

union DeleteTemplateSectionError = EntityNotFoundError | ValidationError

union DeleteTenantError = EntityNotFoundError | ValidationError

union EmexProductAssignToPackingPlaceError =
    EmexOrderCustomerIdIsNotEqualError
  | EmexOrderLockedError
  | EmexProductLockedError
  | EntityNotFoundError
  | PackingPlaceLockedError
  | TypeOrderIsNotCorrectError
  | ValidationError

union IssuePackingPlaceInPostamatError = EntityNotFoundError | ValidationError

union PostamatAssignLockToCellError = EntityNotFoundError | ValidationError

union PostamatSendNewPinCodeError = EntityNotFoundError | ValidationError

union PutPackingPlaceInPostamatError = EntityNotFoundError | ValidationError

union ReturnReturnRequestError =
    EntityNotFoundError
  | PackingPlaceIncorrectStatusError
  | ReturnRequestIncorrectStatusError
  | ValidationError

union SendPackingPlaceError =
    EntityNotFoundError
  | PackingPlaceIncorrectStatusError
  | ValidationError

union SendShipmentRequestError =
    EntityNotFoundError
  | PackingPlaceIncorrectStatusError
  | ShipmentRequestIncorrectStatusError
  | ValidationError

union UpdateAccessKeyError = EntityNotFoundError | ValidationError

union UpdateCellError =
    CellBarcodeAlreadyExistsError
  | CellNameAlreadyExistsError
  | CellPinCodeAlreadyExistsError
  | CellServicePinCodeAlreadyExistsError
  | EntityNotFoundError
  | ValidationError

union UpdateCompanyError =
    ContractorInnAlreadyExistsError
  | ContractorNameAlreadyExistsError
  | EntityNotFoundError
  | ValidationError

union UpdateEmexAccountError =
    EmexAccountNameAlreadyExistsError
  | EmexAccountUserIdAlreadyExistsError
  | EntityNotFoundError
  | ValidationError

union UpdateEmexOrderError =
    EmexOrderCustomerIdIsNotEqualError
  | EmexOrderExternalIdAlreadyExistsError
  | EmexOrderLockedError
  | EmexProductLockedError
  | EntityNotFoundError
  | PackingPlaceLockedError
  | TypeOrderIsNotCorrectError
  | ValidationError

union UpdateEmexProductError =
    EmexOrderCustomerIdIsNotEqualError
  | EmexOrderLockedError
  | EmexProductLockedError
  | EntityNotFoundError
  | PackingPlaceLockedError
  | TypeOrderIsNotCorrectError
  | ValidationError

union UpdateEmployeeError =
    EntityNotFoundError
  | IdentityUserEmailAlreadyExistsError
  | ValidationError

union UpdateIdentityRoleError = EntityNotFoundError | ValidationError

union UpdateIndividualEntrepreneurError =
    ContractorInnAlreadyExistsError
  | ContractorNameAlreadyExistsError
  | EntityNotFoundError
  | ValidationError

union UpdateLastMileAccountsError = EntityNotFoundError | ValidationError

union UpdateLastMileReturnPeriodError = EntityNotFoundError | ValidationError

union UpdateLastMileSmsTemplateError = EntityNotFoundError | ValidationError

union UpdateLastMileStoragePeriodError = EntityNotFoundError | ValidationError

union UpdatePackingPlaceError =
    EntityNotFoundError
  | PackingPlaceBarcodeAlreadyExistsError
  | PackingPlaceEmployeeIsNotCourierError
  | PackingPlaceLockedError
  | PackingPlaceShipmentRequestAssignedError
  | ValidationError

union UpdatePermissionsError = EntityNotFoundError | ValidationError

union UpdatePostamatDisplayError = EntityNotFoundError | ValidationError

union UpdatePostamatError =
    EntityNotFoundError
  | LastMileExternalIdAlreadyExistsError
  | LastMileFactoryNumberAlreadyExistsError
  | LastMileNameAlreadyExistsError
  | ValidationError

union UpdatePostamatFilePrinterError = EntityNotFoundError | ValidationError

union UpdatePostamatNetworkPrinterError = EntityNotFoundError | FormatError | ValidationError

union UpdatePostamatScannerError = EntityNotFoundError | ValidationError

union UpdatePostamatSerialPrinterError = EntityNotFoundError | ValidationError

union UpdatePostamatSettingsError = EntityNotFoundError | ValidationError

union UpdatePromixControllerError =
    ControllerNameAlreadyExistsError
  | EntityNotFoundError
  | ValidationError

union UpdateReturnRequestError =
    EntityNotFoundError
  | ReturnRequestCodeAlreadyExistsError
  | ReturnRequestLockedError
  | ValidationError

union UpdateShipmentRequestError =
    EntityNotFoundError
  | ShipmentRequestCodeAlreadyExistsError
  | ShipmentRequestLockedError
  | ValidationError

union UpdateSizeError = EntityNotFoundError | SizeNameAlreadyExistsError | ValidationError

union UpdateSmsCenterAccountError =
    EntityNotFoundError
  | SmsAccountNameAlreadyExistsError
  | ValidationError

union UpdateSmsTemplateError =
    EntityNotFoundError
  | SmsTemplateNameAlreadyExistsError
  | ValidationError

union UpdateTemplateCellError =
    EntityNotFoundError
  | TemplateCellNameAlreadyExistsError
  | ValidationError

union UpdateTemplatePostamatError =
    EntityNotFoundError
  | TemplatePostamatNameAlreadyExistsError
  | ValidationError

union UpdateTemplateSectionError =
    EntityNotFoundError
  | TemplateSectionNameAlreadyExistsError
  | ValidationError

union UpdateTenantError = EntityNotFoundError | TenantNameAlreadyExistsError | ValidationError

union UpdateTopologyError = EntityNotFoundError | ValidationError

type AccessKey implements Entity & MultiContractor & MultiTenant & Node {
  "Штрих код"
  barcode: String!
  contractor: Contractor!
  contractorId: ID!
  "Истекает в"
  expiresDt: DateTime
  id: ID!
  identityUser: IdentityUser!
  identityUserId: ID!
  "Временный"
  isDisposable: Boolean!
  "Последний вход"
  lastEntrance: DateTime
  lastMile: LastMile!
  lastMileId: ID!
  tenant: Tenant
  tenantId: ID
}

"Реквизиты банковского счета"
type AccountBank {
  "Наименование банка"
  bankName: String!
  "БИК - банковский идентификационный код"
  bic: String!
  "Корреспондентский счёт"
  correspondentAccount: String!
  "Расчетный счет"
  paymentAccount: String!
}

type ActivateCellPayload {
  cell: Cell
  errors: [ActivateCellError!]
}

type ActivatePostamatPayload {
  activatedPostamat: ActivatedPostamat
  errors: [ActivatePostamatError!]
}

type ActivatedPostamat {
  contractorId: UUID!
  postamatId: UUID!
  postamatIdRelay: ID!
}

type ApplicationAuthConfiguration {
  grantedPolicies: [GrantedPolicy!]!
  policies: [Policy!]!
}

type ApplicationConfiguration {
  auth: ApplicationAuthConfiguration!
  clock: Clock!
  currentContractor: CurrentContractor!
  currentTenant: CurrentTenant!
  currentUser: CurrentUser!
  features: ApplicationFeatureConfiguration!
  localization: ApplicationLocalizationConfiguration!
  multiTenancy: MultiTenancyInfo!
  selectableContractors: [SelectableContractor!]!
  setting: ApplicationSettingConfiguration!
  timing: Timing!
}

type ApplicationFeature {
  key: String!
  value: String!
}

type ApplicationFeatureConfiguration {
  values: [ApplicationFeature!]!
}

type ApplicationLocalizationConfiguration {
  currentCulture: CurrentCulture!
  defaultResourceName: String!
  languageFilesMap: [KeyValuePairOfStringAndListOfNameValue!]
  languages: [LanguageInfo!]!
  languagesMap: [KeyValuePairOfStringAndListOfNameValue!]
  texts: [KeyValuePairOfStringAndDictionaryOfStringAndString!]
}

type ApplicationSetting {
  key: String!
  value: String!
}

type ApplicationSettingConfiguration {
  values: [ApplicationSetting!]!
}

type AuthorizeDirective {
  apply: ApplyPolicy!
  policy: String
  roles: [String!]
}

type CancelReturnRequestPayload {
  errors: [CancelReturnRequestError!]
  returnRequest: ReturnRequest
}

type CancelShipmentRequestPayload {
  errors: [CancelShipmentRequestError!]
  shipmentRequest: ShipmentRequest
}

"Ячейка"
type Cell implements CreationAuditedObject & DeletionAuditedObject & Entity & HasCreationTime & HasDeletionTime & HasModificationTime & MayHaveCreator & ModificationAuditedObject & MultiContractor & MultiTenant & Node & SoftDelete {
  "ШК"
  barcode: String!
  contractor: Contractor!
  contractorId: ID!
  creationTime: DateTime
  creator: IdentityUser
  creatorId: ID
  deleter: IdentityUser
  deleterId: ID
  deletionTime: DateTime
  id: ID!
  isDeleted: Boolean!
  "Активирована"
  isEnable: Boolean!
  lastModificationTime: DateTime
  lastModifier: IdentityUser
  lastModifierId: ID
  lock: Lock
  lockId: ID
  "Наименование"
  name: String!
  "Пин-код"
  pinCode: String
  "Места в ячейке"
  places: [PlaceInCell!]!
  postamatId: ID!
  "Приоритет использования"
  priority: Int!
  "Сервисный пин-код"
  servicePinCode: String
  size: Size
  sizeId: ID
  "Статус"
  status: CellStatus!
  tenant: Tenant
  tenantId: ID
  "Тип ячейки"
  type: TypeCell!
}

type CellBarcodeAlreadyExistsError implements BusinessError & Error {
  barcode: String!
  code: String
  details: String
  message: String!
}

type CellDeleteWhenNotEmptyError implements BusinessError & Error {
  code: String
  details: String
  message: String!
}

"Отображение"
type CellDisplay implements MultiContractor & MultiTenant {
  cell: Cell
  cellId: ID
  contractor: Contractor!
  contractorId: ID!
  postamatId: ID!
  templateCell: TemplateCell!
  templateCellId: ID!
  tenant: Tenant
  tenantId: ID
  "Позиция по координате X"
  x: Int!
  "Позиция по координате Y"
  y: Int!
}

type CellNameAlreadyExistsError implements BusinessError & Error {
  code: String
  details: String
  message: String!
  name: String!
}

type CellPinCodeAlreadyExistsError implements BusinessError & Error {
  code: String
  details: String
  message: String!
  pinCode: String!
}

type CellServicePinCodeAlreadyExistsError implements BusinessError & Error {
  code: String
  details: String
  message: String!
  servicePinCode: String!
}

type Clock {
  kind: String!
}

"Information about the offset pagination."
type CollectionSegmentInfo {
  "Indicates whether more items exist following the set defined by the clients arguments."
  hasNextPage: Boolean!
  "Indicates whether more items exist prior the set defined by the clients arguments."
  hasPreviousPage: Boolean!
}

"Компания"
type Company implements Contractor & CreationAuditedObject & DeletionAuditedObject & Entity & HasCreationTime & HasDeletionTime & HasModificationTime & MayHaveCreator & ModificationAuditedObject & MultiTenant & SoftDelete {
  "Реквизиты банковского счета"
  accountBank: AccountBank!
  "Фактический адрес"
  actualAddress: String
  "Адрес"
  address: String!
  creationTime: DateTime
  creator: IdentityUser
  creatorId: ID
  deleter: IdentityUser
  deleterId: ID
  deletionTime: DateTime
  id: ID!
  "ИНН - Индивидуальный номер налогоплательщика"
  inn: String!
  isDeleted: Boolean!
  isHost: Boolean!
  "КПП - Код причины постановки"
  kpp: String
  lastModificationTime: DateTime
  lastModifier: IdentityUser
  lastModifierId: ID
  "Почтовый адрес"
  mailingAddress: String
  "Наименование"
  name: String!
  "ОГРН - Основной государственный регистрационный номер"
  ogrn: String
  "Код ОКПО - Код в Общероссийском классификаторе предприятий и организаций"
  okpo: String
  tenant: Tenant
  tenantId: ID
}

type CompanyCollectionSegment {
  items: [Company!]
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  totalCount: Int!
}

type ContractorCollectionSegment {
  items: [Contractor!]
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  totalCount: Int!
}

type ContractorHostDeletionError implements BusinessError & Error {
  code: String
  details: String
  message: String!
}

type ContractorInnAlreadyExistsError implements BusinessError & Error {
  code: String
  contractor: Contractor!
  details: String
  inn: String!
  message: String!
}

type ContractorNameAlreadyExistsError implements BusinessError & Error {
  code: String
  contractor: Contractor!
  details: String
  message: String!
  name: String!
}

type ControllerNameAlreadyExistsError implements BusinessError & Error {
  code: String
  details: String
  message: String!
  name: String!
}

type CreateAccessKeyPayload {
  accessKey: AccessKey
  errors: [CreateAccessKeyError!]
}

type CreateCellPayload {
  cell: Cell
  errors: [CreateCellError!]
}

type CreateCompanyPayload {
  company: Company
  errors: [CreateCompanyError!]
}

type CreateEmexAccountPayload {
  emexAccount: EmexAccount
  errors: [CreateEmexAccountError!]
}

type CreateEmexOrderPayload {
  emexOrder: EmexOrder
  errors: [CreateEmexOrderError!]
}

type CreateEmexProductPayload {
  emexProduct: EmexProduct
  errors: [CreateEmexProductError!]
}

type CreateEmployeePayload {
  errors: [CreateEmployeeError!]
  identityUser: IdentityUser
}

type CreateIdentityRolePayload {
  errors: [CreateIdentityRoleError!]
  identityRole: IdentityRole
}

type CreateIndividualEntrepreneurPayload {
  errors: [CreateIndividualEntrepreneurError!]
  individualEntrepreneur: IndividualEntrepreneur
}

type CreatePackingPlacePayload {
  errors: [CreatePackingPlaceError!]
  packingPlace: PackingPlace
}

type CreatePostamatPayload {
  errors: [CreatePostamatError!]
  postamat: Postamat
}

type CreatePromixControllerPayload {
  errors: [CreatePromixControllerError!]
  promixController: PromixController
}

type CreateReturnRequestPayload {
  errors: [CreateReturnRequestError!]
  returnRequest: ReturnRequest
}

type CreateShipmentRequestPayload {
  errors: [CreateShipmentRequestError!]
  shipmentRequest: ShipmentRequest
}

type CreateSizePayload {
  errors: [CreateSizeError!]
  size: Size
}

type CreateSmsCenterAccountPayload {
  errors: [CreateSmsCenterAccountError!]
  smsCenterAccount: SmsCenterAccount
}

type CreateSmsTemplatePayload {
  errors: [CreateSmsTemplateError!]
  smsTemplate: SmsTemplate
}

type CreateTemplateCellPayload {
  errors: [CreateTemplateCellError!]
  templateCell: TemplateCell
}

type CreateTemplatePostamatPayload {
  errors: [CreateTemplatePostamatError!]
  templatePostamat: TemplatePostamat
}

type CreateTemplateSectionPayload {
  errors: [CreateTemplateSectionError!]
  templateSection: TemplateSection
}

type CreateTenantPayload {
  errors: [CreateTenantError!]
  tenant: Tenant
}

type CurrentContractor {
  id: ID
  name: String
}

type CurrentCulture {
  cultureName: String!
  dateTimeFormat: DateTimeFormat
  displayName: String!
  englishName: String!
  isRightToLeft: Boolean!
  name: String!
  nativeName: String!
  threeLetterIsoLanguageName: String!
  twoLetterIsoLanguageName: String!
}

type CurrentTenant {
  id: ID
  isAvailable: Boolean!
  name: String
}

type CurrentUser {
  email: String
  emailVerified: Boolean!
  id: ID
  impersonatorTenantId: ID
  impersonatorUserId: ID
  isAuthenticated: Boolean!
  name: String
  phoneNumber: String
  phoneNumberVerified: Boolean!
  roles: [String!]!
  surName: String
  tenantId: ID
  userName: String
}

type DateTimeFormat {
  calendarAlgorithmType: String!
  dateSeparator: String!
  dateTimeFormatLong: String!
  fullDateTimePattern: String!
  longTimePattern: String!
  shortDatePattern: String!
  shortTimePattern: String!
}

type DeactivateCellPayload {
  cell: Cell
  errors: [DeactivateCellError!]
}

type DeleteAccessKeyPayload {
  accessKey: AccessKey
  errors: [DeleteAccessKeyError!]
}

type DeleteCellPayload {
  cell: Cell
  errors: [DeleteCellError!]
}

type DeleteCompanyPayload {
  company: Company
  errors: [DeleteCompanyError!]
}

type DeleteEmexAccountPayload {
  emexAccount: EmexAccount
  errors: [DeleteEmexAccountError!]
}

type DeleteEmexOrderPayload {
  emexOrder: EmexOrder
  errors: [DeleteEmexOrderError!]
}

type DeleteEmexProductPayload {
  emexProduct: EmexProduct
  errors: [DeleteEmexProductError!]
}

type DeleteEmployeePayload {
  errors: [DeleteEmployeeError!]
  identityUser: IdentityUser
}

type DeleteIdentityRolePayload {
  errors: [DeleteIdentityRoleError!]
  identityRole: IdentityRole
}

type DeleteIndividualEntrepreneurPayload {
  errors: [DeleteIndividualEntrepreneurError!]
  individualEntrepreneur: IndividualEntrepreneur
}

type DeleteLastMileSmsTemplatePayload {
  errors: [DeleteLastMileSmsTemplateError!]
  lastMileSmsTemplate: LastMileSmsTemplate
}

type DeletePackingPlacePayload {
  errors: [DeletePackingPlaceError!]
  packingPlace: PackingPlace
}

type DeletePostamatPayload {
  errors: [DeletePostamatError!]
  postamat: Postamat
}

type DeletePromixControllerPayload {
  errors: [DeletePromixControllerError!]
  promixController: PromixController
}

type DeleteReturnRequestPayload {
  errors: [DeleteReturnRequestError!]
  returnRequest: ReturnRequest
}

type DeleteShipmentRequestPayload {
  errors: [DeleteShipmentRequestError!]
  shipmentRequest: ShipmentRequest
}

type DeleteSizePayload {
  errors: [DeleteSizeError!]
  size: Size
}

type DeleteSmsCenterAccountPayload {
  errors: [DeleteSmsCenterAccountError!]
  smsCenterAccount: SmsCenterAccount
}

type DeleteSmsTemplatePayload {
  errors: [DeleteSmsTemplateError!]
  smsTemplate: SmsTemplate
}

type DeleteTemplateCellPayload {
  errors: [DeleteTemplateCellError!]
  templateCell: TemplateCell
}

type DeleteTemplatePostamatPayload {
  errors: [DeleteTemplatePostamatError!]
  templatePostamat: TemplatePostamat
}

type DeleteTemplateSectionPayload {
  errors: [DeleteTemplateSectionError!]
  templateSection: TemplateSection
}

type DeleteTenantPayload {
  errors: [DeleteTenantError!]
  tenant: Tenant
}

"Emex аккаунт"
type EmexAccount implements CreationAuditedObject & DeletionAuditedObject & Entity & HasCreationTime & HasDeletionTime & HasModificationTime & MayHaveCreator & ModificationAuditedObject & MultiContractor & MultiTenant & Node & SoftDelete {
  contractor: Contractor!
  contractorId: ID!
  creationTime: DateTime
  creator: IdentityUser
  creatorId: ID
  deleter: IdentityUser
  deleterId: ID
  deletionTime: DateTime
  id: ID!
  isDeleted: Boolean!
  lastModificationTime: DateTime
  lastModifier: IdentityUser
  lastModifierId: ID
  "Наименование"
  name: String!
  tenant: Tenant
  tenantId: ID
  "Идентификатор оптовика в системе"
  userId: Long!
}

type EmexAccountCollectionSegment {
  items: [EmexAccount!]
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  totalCount: Int!
}

type EmexAccountNameAlreadyExistsError implements BusinessError & Error {
  code: String
  details: String
  message: String!
  name: String!
}

type EmexAccountUserIdAlreadyExistsError implements BusinessError & Error {
  code: String
  details: String
  message: String!
  userId: Long!
}

type EmexCustomer implements CreationAuditedObject & Customer & DeletionAuditedObject & Entity & HasCreationTime & HasDeletionTime & HasModificationTime & MayHaveCreator & ModificationAuditedObject & MultiContractor & MultiTenant & Node & SoftDelete {
  contractor: Contractor!
  contractorId: ID!
  creationTime: DateTime
  creator: IdentityUser
  creatorId: ID
  deleter: IdentityUser
  deleterId: ID
  deletionTime: DateTime
  email: String
  externalId: String!
  id: ID!
  isDeleted: Boolean!
  lastModificationTime: DateTime
  lastModifier: IdentityUser
  lastModifierId: ID
  name: String!
  phone: String!
  tenant: Tenant
  tenantId: ID
}

type EmexCustomerCollectionSegment {
  items: [EmexCustomer!]
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  totalCount: Int!
}

"Заказ Emex"
type EmexOrder implements CreationAuditedObject & DeletionAuditedObject & Entity & HasCreationTime & HasDeletionTime & HasModificationTime & MayHaveCreator & ModificationAuditedObject & MultiContractor & MultiTenant & Node & SoftDelete {
  contractor: Contractor!
  contractorId: ID!
  creationTime: DateTime
  creator: IdentityUser
  creatorId: ID
  customer: EmexCustomer!
  customerId: ID!
  deleter: IdentityUser
  deleterId: ID
  deletionTime: DateTime
  externalId: String!
  "Идентификатор движения Emex"
  globalId: Long!
  id: ID!
  isDeleted: Boolean!
  isLocked: Boolean!
  lastModificationTime: DateTime
  lastModifier: IdentityUser
  lastModifierId: ID
  products(order: [EmexProductSortInput!], where: EmexProductFilterInput): [EmexProduct!]!
  status: EmexOrderStatus!
  tenant: Tenant
  tenantId: ID
}

type EmexOrderCollectionSegment {
  items: [EmexOrder!]
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  totalCount: Int!
}

type EmexOrderCustomerIdIsNotEqualError implements BusinessError & Error {
  code: String
  current: UUID!
  customerCurrent: EmexCustomer!
  customerVerifiable: EmexCustomer
  details: String
  message: String!
  packingPlace: PackingPlace!
  packingPlaceId: UUID!
  verifiable: UUID
}

type EmexOrderExternalIdAlreadyExistsError implements BusinessError & Error {
  code: String
  details: String
  externalId: String!
  message: String!
}

type EmexOrderLockedError implements BusinessError & Error {
  code: String
  details: String
  id: UUID!
  message: String!
  order: EmexOrder!
}

"Товар Emex"
type EmexProduct implements CreationAuditedObject & DeletionAuditedObject & Entity & HasCreationTime & HasDeletionTime & HasModificationTime & MayHaveCreator & ModificationAuditedObject & MultiContractor & MultiTenant & Node & SoftDelete {
  "Штрих код"
  barcode: String
  contractor: Contractor!
  contractorId: ID!
  creationTime: DateTime
  creator: IdentityUser
  creatorId: ID
  deleter: IdentityUser
  deleterId: ID
  deletionTime: DateTime
  "Грузотаможенная декларация"
  gtd: String
  id: ID!
  isDeleted: Boolean!
  isLocked: Boolean!
  lastModificationTime: DateTime
  lastModifier: IdentityUser
  lastModifierId: ID
  "Производитель"
  manufacturer: String!
  "Страна производитель"
  manufacturerCountry: String
  "Код страны производителя"
  manufacturerCountryCode: String
  "Маркировка"
  marking: String
  "Название"
  name: String!
  order: EmexOrder!
  orderId: ID!
  packingPlace: PackingPlace
  "Ид упаковочного места"
  packingPlaceId: ID
  "Цена"
  price: Decimal!
  "Кол-во"
  quantity: Decimal!
  status: EmexProductStatus!
  "Сумма"
  sum: Decimal!
  tenant: Tenant
  tenantId: ID
  "Тип баланса"
  typeBalance: EmexTypeBalance!
  "Тип оплаты"
  typePayment: EmexTypePayment!
  "Ставка НДС"
  vat: Decimal!
  "Артикул"
  vendorCode: String!
}

type EmexProductAssignToPackingPlacePayload {
  emexProduct: EmexProduct
  errors: [EmexProductAssignToPackingPlaceError!]
}

type EmexProductCollectionSegment {
  items: [EmexProduct!]
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  totalCount: Int!
}

type EmexProductLockedError implements BusinessError & Error {
  code: String
  details: String
  id: UUID!
  message: String!
  product: EmexProduct!
}

type EntityNotFoundError implements Error {
  id: String
  message: String!
  type: String
}

"Файловый принтер"
type FilePrinter {
  "Путь к файлу"
  filePath: String!
  "Включен"
  isEnabled: Boolean!
}

type FormatError implements Error {
  message: String!
}

type GrantedPolicy {
  key: String!
  value: Boolean!
}

type IanaTimeZone {
  timeZoneName: String!
}

type IdentityRole implements Entity & MultiTenant & Node {
  id: ID!
  isDefault: Boolean!
  isPublic: Boolean!
  isStatic: Boolean!
  name: String!
  normalizedName: String!
  tenant: Tenant
  tenantId: ID
}

type IdentityRoleCollectionSegment {
  items: [IdentityRole!]
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  totalCount: Int!
}

type IdentityUser implements CreationAuditedObject & DeletionAuditedObject & Entity & HasCreationTime & HasDeletionTime & HasModificationTime & MayHaveCreator & ModificationAuditedObject & MultiTenant & Node & SoftDelete {
  contractors: [Contractor!]!
  creationTime: DateTime
  creator: IdentityUser
  creatorId: ID
  deleter: IdentityUser
  deleterId: ID
  deletionTime: DateTime
  email: String!
  id: ID!
  isDeleted: Boolean!
  lastModificationTime: DateTime
  lastModifier: IdentityUser
  lastModifierId: ID
  middleName: String
  name: String!
  phoneNumber: String!
  roleIds: [ID!]
  roles: [IdentityRole!]!
  surname: String!
  tenant: Tenant
  tenantId: ID
}

type IdentityUserCollectionSegment {
  items: [IdentityUser!]
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  totalCount: Int!
}

type IdentityUserEmailAlreadyExistsError implements BusinessError & Error {
  code: String
  details: String
  email: String!
  message: String!
}

"Индивидуальный предприниматель"
type IndividualEntrepreneur implements Contractor & CreationAuditedObject & DeletionAuditedObject & Entity & HasCreationTime & HasDeletionTime & HasModificationTime & MayHaveCreator & ModificationAuditedObject & MultiTenant & SoftDelete {
  "Реквизиты банковского счета"
  accountBank: AccountBank!
  "Фактический адрес"
  actualAddress: String
  "Адрес"
  address: String!
  creationTime: DateTime
  creator: IdentityUser
  creatorId: ID
  deleter: IdentityUser
  deleterId: ID
  deletionTime: DateTime
  id: ID!
  "ИНН - Индивидуальный номер налогоплательщика"
  inn: String!
  isDeleted: Boolean!
  isHost: Boolean!
  lastModificationTime: DateTime
  lastModifier: IdentityUser
  lastModifierId: ID
  "Почтовый адрес"
  mailingAddress: String
  "Наименование"
  name: String!
  "ОГРНИП - Основной государственный регистрационный номер индивидуального предпринимателя"
  ogrnip: String
  "Код ОКПО - Код в Общероссийском классификаторе предприятий и организаций"
  okpo: String
  tenant: Tenant
  tenantId: ID
}

type IndividualEntrepreneurCollectionSegment {
  items: [IndividualEntrepreneur!]
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  totalCount: Int!
}

type IssuePackingPlaceInPostamatPayload {
  errors: [IssuePackingPlaceInPostamatError!]
  postamat: Postamat
}

type KeyValuePairOfStringAndDictionaryOfStringAndString {
  key: String!
  value: [KeyValuePairOfStringAndString!]!
}

type KeyValuePairOfStringAndListOfNameValue {
  key: String!
  value: [NameValue!]!
}

type KeyValuePairOfStringAndString {
  key: String!
  value: String!
}

type LanguageInfo {
  cultureName: String!
  displayName: String!
  flagIcon: String
  uiCultureName: String!
}

type LastMileAccountIds {
  emexAccountId: ID
  smsAccountId: ID
}

type LastMileCollectionSegment {
  items: [LastMile!]
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  totalCount: Int!
}

type LastMileExternalIdAlreadyExistsError implements BusinessError & Error {
  code: String
  details: String
  externalId: String!
  message: String!
}

type LastMileFactoryNumberAlreadyExistsError implements BusinessError & Error {
  code: String
  details: String
  factoryNumber: String!
  message: String!
}

type LastMileNameAlreadyExistsError implements BusinessError & Error {
  code: String
  details: String
  message: String!
  name: String!
}

type LastMileReturnPeriod implements MultiContractor & MultiTenant {
  contractor: Contractor!
  contractorId: ID!
  lastMileId: ID!
  "Период возврата заказа в часах"
  period: Int!
  tenant: Tenant
  tenantId: ID
  typeOrder: TypeOrder!
}

type LastMileSmsTemplate implements MultiContractor & MultiTenant {
  contractor: Contractor!
  contractorId: ID!
  eventType: NotificationEventType!
  lastMileId: ID!
  smsTemplate: SmsTemplate!
  smsTemplateId: ID!
  tenant: Tenant
  tenantId: ID
  typeOrder: TypeOrder!
}

type LastMileStoragePeriod implements MultiContractor & MultiTenant {
  contractor: Contractor!
  contractorId: ID!
  lastMileId: ID!
  "Период хранения заказа в часах"
  period: Int!
  tenant: Tenant
  tenantId: ID
  typeOrder: TypeOrder!
}

"Замок"
type Lock implements Entity & MultiContractor & MultiTenant & Node {
  "Адрес"
  address: String!
  cell: Cell
  contractor: Contractor!
  contractorId: ID!
  id: ID!
  tenant: Tenant
  tenantId: ID
}

type MultiTenancyInfo {
  isEnabled: Boolean!
}

type Mutation {
  activateCell(input: ActivateCellInput!): ActivateCellPayload!
  activatePostamat(input: ActivatePostamatInput!): ActivatePostamatPayload!
  cancelReturnRequest(input: CancelReturnRequestInput!): CancelReturnRequestPayload!
  cancelShipmentRequest(input: CancelShipmentRequestInput!): CancelShipmentRequestPayload!
  createAccessKey(input: CreateAccessKeyInput!): CreateAccessKeyPayload!
  createCell(input: CreateCellInput!): CreateCellPayload!
  createCompany(input: CreateCompanyInput!): CreateCompanyPayload!
  createEmexAccount(input: CreateEmexAccountInput!): CreateEmexAccountPayload!
  createEmexOrder(input: CreateEmexOrderInput!): CreateEmexOrderPayload!
  createEmexProduct(input: CreateEmexProductInput!): CreateEmexProductPayload!
  createEmployee(input: CreateEmployeeInput!): CreateEmployeePayload!
  createIdentityRole(input: CreateIdentityRoleInput!): CreateIdentityRolePayload!
  createIndividualEntrepreneur(
    input: CreateIndividualEntrepreneurInput!
  ): CreateIndividualEntrepreneurPayload!
  createPackingPlace(input: CreatePackingPlaceInput!): CreatePackingPlacePayload!
  createPostamat(input: CreatePostamatInput!): CreatePostamatPayload!
  createPromixController(input: CreatePromixControllerInput!): CreatePromixControllerPayload!
  createReturnRequest(input: CreateReturnRequestInput!): CreateReturnRequestPayload!
  createShipmentRequest(input: CreateShipmentRequestInput!): CreateShipmentRequestPayload!
  createSize(input: CreateSizeInput!): CreateSizePayload!
  createSmsCenterAccount(input: CreateSmsCenterAccountInput!): CreateSmsCenterAccountPayload!
  createSmsTemplate(input: CreateSmsTemplateInput!): CreateSmsTemplatePayload!
  createTemplateCell(input: CreateTemplateCellInput!): CreateTemplateCellPayload!
  createTemplatePostamat(input: CreateTemplatePostamatInput!): CreateTemplatePostamatPayload!
  createTemplateSection(input: CreateTemplateSectionInput!): CreateTemplateSectionPayload!
  createTenant(input: CreateTenantInput!): CreateTenantPayload!
  deactivateCell(input: DeactivateCellInput!): DeactivateCellPayload!
  deleteAccessKey(input: DeleteAccessKeyInput!): DeleteAccessKeyPayload!
  deleteCell(input: DeleteCellInput!): DeleteCellPayload!
  deleteCompany(input: DeleteCompanyInput!): DeleteCompanyPayload!
  deleteEmexAccount(input: DeleteEmexAccountInput!): DeleteEmexAccountPayload!
  deleteEmexOrder(input: DeleteEmexOrderInput!): DeleteEmexOrderPayload!
  deleteEmexProduct(input: DeleteEmexProductInput!): DeleteEmexProductPayload!
  deleteEmployee(input: DeleteEmployeeInput!): DeleteEmployeePayload!
  deleteIdentityRole(input: DeleteIdentityRoleInput!): DeleteIdentityRolePayload!
  deleteIndividualEntrepreneur(
    input: DeleteIndividualEntrepreneurInput!
  ): DeleteIndividualEntrepreneurPayload!
  deleteLastMileSmsTemplate(
    input: DeleteLastMileSmsTemplateInput!
  ): DeleteLastMileSmsTemplatePayload!
  deletePackingPlace(input: DeletePackingPlaceInput!): DeletePackingPlacePayload!
  deletePostamat(input: DeletePostamatInput!): DeletePostamatPayload!
  deletePromixController(input: DeletePromixControllerInput!): DeletePromixControllerPayload!
  deleteReturnRequest(input: DeleteReturnRequestInput!): DeleteReturnRequestPayload!
  deleteShipmentRequest(input: DeleteShipmentRequestInput!): DeleteShipmentRequestPayload!
  deleteSize(input: DeleteSizeInput!): DeleteSizePayload!
  deleteSmsCenterAccount(input: DeleteSmsCenterAccountInput!): DeleteSmsCenterAccountPayload!
  deleteSmsTemplate(input: DeleteSmsTemplateInput!): DeleteSmsTemplatePayload!
  deleteTemplateCell(input: DeleteTemplateCellInput!): DeleteTemplateCellPayload!
  deleteTemplatePostamat(input: DeleteTemplatePostamatInput!): DeleteTemplatePostamatPayload!
  deleteTemplateSection(input: DeleteTemplateSectionInput!): DeleteTemplateSectionPayload!
  deleteTenant(input: DeleteTenantInput!): DeleteTenantPayload!
  emexProductAssignToPackingPlace(
    input: EmexProductAssignToPackingPlaceInput!
  ): EmexProductAssignToPackingPlacePayload!
  issuePackingPlaceInPostamat(
    input: IssuePackingPlaceInPostamatInput!
  ): IssuePackingPlaceInPostamatPayload!
  postamatAssignLockToCell(input: PostamatAssignLockToCellInput!): PostamatAssignLockToCellPayload!
  postamatSendNewPinCode(input: PostamatSendNewPinCodeInput!): PostamatSendNewPinCodePayload!
  putPackingPlaceInPostamat(
    input: PutPackingPlaceInPostamatInput!
  ): PutPackingPlaceInPostamatPayload!
  returnReturnRequest(input: ReturnReturnRequestInput!): ReturnReturnRequestPayload!
  sendPackingPlace(input: SendPackingPlaceInput!): SendPackingPlacePayload!
  sendShipmentRequest(input: SendShipmentRequestInput!): SendShipmentRequestPayload!
  updateAccessKey(input: UpdateAccessKeyInput!): UpdateAccessKeyPayload!
  updateCell(input: UpdateCellInput!): UpdateCellPayload!
  updateCompany(input: UpdateCompanyInput!): UpdateCompanyPayload!
  updateEmexAccount(input: UpdateEmexAccountInput!): UpdateEmexAccountPayload!
  updateEmexOrder(input: UpdateEmexOrderInput!): UpdateEmexOrderPayload!
  updateEmexProduct(input: UpdateEmexProductInput!): UpdateEmexProductPayload!
  updateEmployee(input: UpdateEmployeeInput!): UpdateEmployeePayload!
  updateIdentityRole(input: UpdateIdentityRoleInput!): UpdateIdentityRolePayload!
  updateIndividualEntrepreneur(
    input: UpdateIndividualEntrepreneurInput!
  ): UpdateIndividualEntrepreneurPayload!
  updateLastMileAccounts(input: UpdateLastMileAccountsInput!): UpdateLastMileAccountsPayload!
  updateLastMileReturnPeriod(
    input: UpdateLastMileReturnPeriodInput!
  ): UpdateLastMileReturnPeriodPayload!
  updateLastMileSmsTemplate(
    input: UpdateLastMileSmsTemplateInput!
  ): UpdateLastMileSmsTemplatePayload!
  updateLastMileStoragePeriod(
    input: UpdateLastMileStoragePeriodInput!
  ): UpdateLastMileStoragePeriodPayload!
  updatePackingPlace(input: UpdatePackingPlaceInput!): UpdatePackingPlacePayload!
  updatePermissions(input: UpdatePermissionsInput!): UpdatePermissionsPayload!
  updatePostamat(input: UpdatePostamatInput!): UpdatePostamatPayload!
  updatePostamatDisplay(input: UpdatePostamatDisplayInput!): UpdatePostamatDisplayPayload!
  updatePostamatFilePrinter(
    input: UpdatePostamatFilePrinterInput!
  ): UpdatePostamatFilePrinterPayload!
  updatePostamatNetworkPrinter(
    input: UpdatePostamatNetworkPrinterInput!
  ): UpdatePostamatNetworkPrinterPayload!
  updatePostamatScanner(input: UpdatePostamatScannerInput!): UpdatePostamatScannerPayload!
  updatePostamatSerialPrinter(
    input: UpdatePostamatSerialPrinterInput!
  ): UpdatePostamatSerialPrinterPayload!
  updatePostamatSettings(input: UpdatePostamatSettingsInput!): UpdatePostamatSettingsPayload!
  updatePromixController(input: UpdatePromixControllerInput!): UpdatePromixControllerPayload!
  updateReturnRequest(input: UpdateReturnRequestInput!): UpdateReturnRequestPayload!
  updateShipmentRequest(input: UpdateShipmentRequestInput!): UpdateShipmentRequestPayload!
  updateSize(input: UpdateSizeInput!): UpdateSizePayload!
  updateSmsCenterAccount(input: UpdateSmsCenterAccountInput!): UpdateSmsCenterAccountPayload!
  updateSmsTemplate(input: UpdateSmsTemplateInput!): UpdateSmsTemplatePayload!
  updateTemplateCell(input: UpdateTemplateCellInput!): UpdateTemplateCellPayload!
  updateTemplatePostamat(input: UpdateTemplatePostamatInput!): UpdateTemplatePostamatPayload!
  updateTemplateSection(input: UpdateTemplateSectionInput!): UpdateTemplateSectionPayload!
  updateTenant(input: UpdateTenantInput!): UpdateTenantPayload!
  updateTopology(input: UpdateTopologyInput!): UpdateTopologyPayload!
}

type NameValue {
  name: String!
  value: String
}

"Сетевой принтер"
type NetworkPrinter {
  "IP адрес"
  ipAddress: String!
  "Включен"
  isEnabled: Boolean!
  "Порт"
  port: Int!
  "Циклическое подключение"
  reconnectOnTimeout: Boolean!
}

type PackingPlace implements CreationAuditedObject & DeletionAuditedObject & Entity & HasCreationTime & HasDeletionTime & HasModificationTime & MayHaveCreator & ModificationAuditedObject & MultiContractor & MultiTenant & Node & SoftDelete {
  "Штрих код"
  barcode: String!
  "История изменения статуса"
  changesHistory(
    order: [PackingPlaceStatusChangeHistorySortInput!]
    where: PackingPlaceStatusChangeHistoryFilterInput
  ): [PackingPlaceStatusChangeHistory!]!
  contractor: Contractor!
  contractorId: ID!
  courier: IdentityUser
  courierId: ID
  creationTime: DateTime
  creator: IdentityUser
  creatorId: ID
  customer: Customer
  customerId: ID
  deleter: IdentityUser
  deleterId: ID
  deletionTime: DateTime
  id: ID!
  isDeleted: Boolean!
  "Заблокировано от изменений"
  isLocked: Boolean!
  lastMile: LastMile
  lastMileId: ID
  lastModificationTime: DateTime
  lastModifier: IdentityUser
  lastModifierId: ID
  size: Size
  sizeId: ID
  "Статус упаковочного места"
  status: PackingPlaceStatus!
  tenant: Tenant
  tenantId: ID
  typeOrder: TypeOrder!
}

type PackingPlaceBarcodeAlreadyExistsError implements BusinessError & Error {
  barcode: String!
  code: String
  details: String
  message: String!
}

type PackingPlaceCollectionSegment {
  items: [PackingPlace!]
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  totalCount: Int!
}

type PackingPlaceEmployeeIsNotCourierError implements BusinessError & Error {
  code: String
  details: String
  employee: IdentityUser!
  identityUserId: UUID!
  message: String!
}

type PackingPlaceIncorrectStatusError implements BusinessError & Error {
  code: String
  current: PackingPlaceStatus!
  details: String
  message: String!
  next: PackingPlaceStatus!
}

type PackingPlaceLockedError implements BusinessError & Error {
  code: String
  details: String
  id: UUID!
  message: String!
  packingPlace: PackingPlace!
}

type PackingPlaceShipmentRequestAssignedError implements BusinessError & Error {
  code: String
  details: String
  message: String!
  shipmentId: UUID!
}

"История изменения статуса"
type PackingPlaceStatusChangeHistory implements CreationAuditedObject & HasCreationTime & MayHaveCreator & MultiContractor & MultiTenant {
  contractor: Contractor!
  contractorId: ID!
  creationTime: DateTime
  creator: IdentityUser
  creatorId: ID
  packingPlaceId: ID!
  "Статус"
  status: PackingPlaceStatus!
  tenant: Tenant
  tenantId: ID
}

type PermissionGrantInfo {
  allowedProviders: [String!]!
  displayName: String!
  grantedProviders: [ProviderInfo!]!
  isGranted: Boolean!
  name: String!
  parentName: String
}

type PermissionGroup {
  displayName: String!
  name: String!
  permissions: [PermissionGrantInfo!]!
}

type PermissionList {
  entityDisplayName: String!
  groups: [PermissionGroup!]!
}

type PlaceInCell implements MultiContractor & MultiTenant {
  cellId: ID!
  contractor: Contractor!
  contractorId: ID!
  packingPlace: PackingPlace!
  packingPlaceId: ID!
  reserved: Boolean!
  "Хранить до"
  storeUntil: DateTime
  tenant: Tenant
  tenantId: ID
}

type Policy {
  key: String!
  value: Boolean!
}

"Постамат"
type Postamat implements CreationAuditedObject & DeletionAuditedObject & Entity & HasCreationTime & HasDeletionTime & HasModificationTime & LastMile & MayHaveCreator & ModificationAuditedObject & MultiContractor & MultiTenant & Node & SoftDelete {
  "Ключи доступа"
  accessKeys(order: [AccessKeySortInput!], where: AccessKeyFilterInput): [AccessKey!]!
  "Ид аккаунтов"
  accountIds: LastMileAccountIds!
  "Адрес"
  address: String!
  "Ячейки"
  cells(order: [CellSortInput!], where: CellFilterInput): [Cell!]!
  contractor: Contractor!
  contractorId: ID!
  "Контроллеры"
  controllers(
    order: [ControllerBaseSortInput!]
    where: ControllerBaseFilterInput
  ): [ControllerBase!]!
  creationTime: DateTime
  creator: IdentityUser
  creatorId: ID
  defaultCourier: IdentityUser!
  defaultCourierId: ID!
  deleter: IdentityUser
  deleterId: ID
  deletionTime: DateTime
  "Отображение"
  displays(order: [CellDisplaySortInput!], where: CellDisplayFilterInput): [CellDisplay!]!
  "Внешний ID"
  externalId: String!
  "Заводской номер"
  factoryNumber: String!
  "Файловый принтер"
  filePrinter: FilePrinter!
  id: ID!
  isDeleted: Boolean!
  lastModificationTime: DateTime
  lastModifier: IdentityUser
  lastModifierId: ID
  "Наименование"
  name: String!
  "Сетевой принтер"
  networkPrinter: NetworkPrinter!
  "Сроки возврата заказов"
  returnPeriods(
    order: [LastMileReturnPeriodSortInput!]
    where: LastMileReturnPeriodFilterInput
  ): [LastMileReturnPeriod!]!
  "Настройки сканера"
  scanner: PostamatScanner!
  "COM принтер"
  serialPrinter: SerialPrinter!
  "Настройки"
  settings: PostamatSettings!
  "Смс шаблоны"
  smsTemplates(
    order: [LastMileSmsTemplateSortInput!]
    where: LastMileSmsTemplateFilterInput
  ): [LastMileSmsTemplate!]!
  "Статус"
  status: LastMileStatus!
  "Сроки хранения заказов"
  storagePeriods(
    order: [LastMileStoragePeriodSortInput!]
    where: LastMileStoragePeriodFilterInput
  ): [LastMileStoragePeriod!]!
  tenant: Tenant
  tenantId: ID
  "Код доступа"
  token: String!
}

type PostamatAssignLockToCellPayload {
  errors: [PostamatAssignLockToCellError!]
  postamat: Postamat
}

type PostamatCollectionSegment {
  items: [Postamat!]
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  totalCount: Int!
}

type PostamatScanner {
  "Скорость передачи для последовательного порта (в бодах)."
  baudRate: Int!
  "Стандартное число битов данных в байте."
  dataBits: Int!
  "Протокол контроля четности."
  parity: Parity!
  "Последовательный порт, в частности, любой из доступных портов COM."
  portName: String!
  "Стандартное число стоповых битов в байте."
  stopBits: StopBits!
}

type PostamatSendNewPinCodePayload {
  errors: [PostamatSendNewPinCodeError!]
  result: Boolean
}

type PostamatSettings {
  "Телефон администратора"
  adminPhone: String
  "Авто обновление"
  isAutoUpdate: Boolean!
  "Прием только по списку ожидания."
  receptionWaitingListOnly: Boolean!
}

type PromixController implements ControllerBase & Entity & MultiContractor & MultiTenant & Node {
  contractor: Contractor!
  contractorId: ID!
  id: ID!
  "Замки"
  locks: [Lock!]!
  "Наименование"
  name: String!
  postamatId: ID!
  "Настройки serial port"
  settings: SerialPortSettings!
  tenant: Tenant
  tenantId: ID
}

type ProviderInfo {
  providerKey: String!
  providerName: String!
}

type PutPackingPlaceInPostamatPayload {
  errors: [PutPackingPlaceInPostamatError!]
  postamat: Postamat
}

type Query {
  accessKey(lastMileId: ID!, where: AccessKeyFilterInput): AccessKey
  accessKeys(
    lastMileId: ID!
    order: [AccessKeySortInput!]
    where: AccessKeyFilterInput
  ): [AccessKey!]!
  accessKeysAny(lastMileId: ID!, where: AccessKeyFilterInput): Boolean!
  accessKeysCount(lastMileId: ID!, where: AccessKeyFilterInput): Int!
  applicationConfiguration: ApplicationConfiguration!
  cell(postamatId: ID!, where: CellFilterInput): Cell
  cellById(cellId: ID!): Cell!
  cells(order: [CellSortInput!], postamatId: ID!, where: CellFilterInput): [Cell!]!
  cellsAny(postamatId: ID!, where: CellFilterInput): Boolean!
  cellsByPin(pinCode: String!, postamatId: ID!): Cell
  companies(
    order: [CompanySortInput!]
    skip: Int
    take: Int
    where: CompanyFilterInput
  ): CompanyCollectionSegment
  companiesAny(where: CompanyFilterInput): Boolean!
  companiesCount(where: CompanyFilterInput): Int!
  company(where: CompanyFilterInput): Company
  companyById(id: ID!): Company!
  contractor(where: ContractorFilterInput): Contractor
  contractorById(id: ID!): Contractor!
  contractors(
    order: [ContractorSortInput!]
    skip: Int
    take: Int
    where: ContractorFilterInput
  ): ContractorCollectionSegment
  contractorsAny(where: ContractorFilterInput): Boolean!
  contractorsCount(where: ContractorFilterInput): Int!
  controller(postamatId: ID!, where: ControllerBaseFilterInput): ControllerBase
  controllers(
    order: [ControllerBaseSortInput!]
    postamatId: ID!
    where: ControllerBaseFilterInput
  ): [ControllerBase!]!
  controllersAny(postamatId: ID!, where: ControllerBaseFilterInput): Boolean!
  controllersCount(postamatId: ID!, where: ControllerBaseFilterInput): Int!
  courier(where: IdentityUserFilterInput): IdentityUser
  courierById(id: ID!): IdentityUser!
  couriers(
    order: [IdentityUserSortInput!]
    skip: Int
    take: Int
    where: IdentityUserFilterInput
  ): IdentityUserCollectionSegment
  couriersAny(where: IdentityUserFilterInput): Boolean!
  couriersCount(where: IdentityUserFilterInput): Int!
  emexAccount(where: EmexAccountFilterInput): EmexAccount
  emexAccountById(id: ID!): EmexAccount!
  emexAccounts(
    order: [EmexAccountSortInput!]
    skip: Int
    take: Int
    where: EmexAccountFilterInput
  ): EmexAccountCollectionSegment
  emexAccountsAny(where: EmexAccountFilterInput): Boolean!
  emexAccountsCount(where: EmexAccountFilterInput): Int!
  emexCustomer(where: EmexCustomerFilterInput): EmexCustomer
  emexCustomerById(id: ID!): EmexCustomer!
  emexCustomers(
    order: [EmexCustomerSortInput!]
    skip: Int
    take: Int
    where: EmexCustomerFilterInput
  ): EmexCustomerCollectionSegment
  emexCustomersAny(where: EmexCustomerFilterInput): Boolean!
  emexCustomersCount(where: EmexCustomerFilterInput): Int!
  emexOrder(where: EmexOrderFilterInput): EmexOrder
  emexOrderById(id: ID!): EmexOrder!
  emexOrders(
    order: [EmexOrderSortInput!]
    skip: Int
    take: Int
    where: EmexOrderFilterInput
  ): EmexOrderCollectionSegment
  emexOrdersAny(where: EmexOrderFilterInput): Boolean!
  emexOrdersCount(where: EmexOrderFilterInput): Int!
  emexProduct(where: EmexProductFilterInput): EmexProduct
  emexProductById(id: ID!): EmexProduct!
  emexProducts(
    order: [EmexProductSortInput!]
    skip: Int
    take: Int
    where: EmexProductFilterInput
  ): EmexProductCollectionSegment
  emexProductsAny(where: EmexProductFilterInput): Boolean!
  emexProductsCount(where: EmexProductFilterInput): Int!
  employee(where: IdentityUserFilterInput): IdentityUser
  employeeById(id: ID!): IdentityUser!
  employees(
    order: [IdentityUserSortInput!]
    skip: Int
    take: Int
    where: IdentityUserFilterInput
  ): IdentityUserCollectionSegment
  employeesAny(where: IdentityUserFilterInput): Boolean!
  employeesCount(where: IdentityUserFilterInput): Int!
  identityRole(where: IdentityRoleFilterInput): IdentityRole
  identityRoleById(id: ID!): IdentityRole!
  identityRoles(
    order: [IdentityRoleSortInput!]
    skip: Int
    take: Int
    where: IdentityRoleFilterInput
  ): IdentityRoleCollectionSegment
  identityRolesAny(where: IdentityRoleFilterInput): Boolean!
  identityRolesCount(where: IdentityRoleFilterInput): Int!
  identityUser(where: IdentityUserFilterInput): IdentityUser
  identityUserById(id: ID!): IdentityUser!
  identityUsers(
    order: [IdentityUserSortInput!]
    skip: Int
    take: Int
    where: IdentityUserFilterInput
  ): IdentityUserCollectionSegment
  identityUsersAny(where: IdentityUserFilterInput): Boolean!
  identityUsersCount(where: IdentityUserFilterInput): Int!
  individualEntrepreneur(where: IndividualEntrepreneurFilterInput): IndividualEntrepreneur
  individualEntrepreneurById(id: ID!): IndividualEntrepreneur!
  individualEntrepreneurs(
    order: [IndividualEntrepreneurSortInput!]
    skip: Int
    take: Int
    where: IndividualEntrepreneurFilterInput
  ): IndividualEntrepreneurCollectionSegment
  individualEntrepreneursAny(where: IndividualEntrepreneurFilterInput): Boolean!
  individualEntrepreneursCount(where: IndividualEntrepreneurFilterInput): Int!
  isEmailUnique(email: String!): Boolean!
  lastMile(where: LastMileFilterInput): LastMile
  lastMileById(id: ID!): LastMile!
  lastMiles(
    order: [LastMileSortInput!]
    skip: Int
    take: Int
    where: LastMileFilterInput
  ): LastMileCollectionSegment
  lastMilesAny(where: LastMileFilterInput): Boolean!
  lastMilesCount(where: LastMileFilterInput): Int!
  "Fetches an object given its ID."
  node("ID of the object." id: ID!): Node
  "Lookup nodes by a list of IDs."
  nodes("The list of node IDs." ids: [ID!]!): [Node]!
  packingPlace(where: PackingPlaceFilterInput): PackingPlace
  packingPlaceById(id: ID!): PackingPlace!
  packingPlaceByLastMileId(
    lastMileId: ID!
    order: [PackingPlaceSortInput!]
    where: PackingPlaceFilterInput
  ): [PackingPlace!]!
  packingPlaces(
    order: [PackingPlaceSortInput!]
    skip: Int
    take: Int
    where: PackingPlaceFilterInput
  ): PackingPlaceCollectionSegment
  packingPlacesAny(where: PackingPlaceFilterInput): Boolean!
  packingPlacesCount(where: PackingPlaceFilterInput): Int!
  permissions(providerKey: String!, providerName: String!): PermissionList!
  postamat(where: PostamatFilterInput): Postamat
  postamatById(id: ID!): Postamat!
  postamats(
    order: [PostamatSortInput!]
    skip: Int
    take: Int
    where: PostamatFilterInput
  ): PostamatCollectionSegment
  postamatsAny(where: PostamatFilterInput): Boolean!
  postamatsCount(where: PostamatFilterInput): Int!
  returnRequest(where: ReturnRequestFilterInput): ReturnRequest
  returnRequestById(id: ID!): ReturnRequest!
  returnRequests(
    order: [ReturnRequestSortInput!]
    skip: Int
    take: Int
    where: ReturnRequestFilterInput
  ): ReturnRequestCollectionSegment
  returnRequestsAny(where: ReturnRequestFilterInput): Boolean!
  returnRequestsCount(where: ReturnRequestFilterInput): Int!
  shipmentRequest(where: ShipmentRequestFilterInput): ShipmentRequest
  shipmentRequestById(id: ID!): ShipmentRequest!
  shipmentRequests(
    order: [ShipmentRequestSortInput!]
    skip: Int
    take: Int
    where: ShipmentRequestFilterInput
  ): ShipmentRequestCollectionSegment
  shipmentRequestsAny(where: ShipmentRequestFilterInput): Boolean!
  shipmentRequestsCount(where: ShipmentRequestFilterInput): Int!
  size(where: SizeFilterInput): Size
  sizeById(id: ID!): Size!
  sizes(
    order: [SizeSortInput!]
    skip: Int
    take: Int
    where: SizeFilterInput
  ): SizeCollectionSegment
  sizesAny(where: SizeFilterInput): Boolean!
  sizesCount(where: SizeFilterInput): Int!
  smsAccount(where: SmsAccountFilterInput): SmsAccount
  smsAccountById(id: ID!): SmsAccount!
  smsAccounts(
    order: [SmsAccountSortInput!]
    skip: Int
    take: Int
    where: SmsAccountFilterInput
  ): SmsAccountCollectionSegment
  smsAccountsAny(where: SmsAccountFilterInput): Boolean!
  smsAccountsCount(where: SmsAccountFilterInput): Int!
  smsCenterAccount(where: SmsCenterAccountFilterInput): SmsCenterAccount
  smsCenterAccountById(id: ID!): SmsCenterAccount!
  smsCenterAccounts(
    order: [SmsCenterAccountSortInput!]
    skip: Int
    take: Int
    where: SmsCenterAccountFilterInput
  ): SmsCenterAccountCollectionSegment
  smsCenterAccountsAny(where: SmsCenterAccountFilterInput): Boolean!
  smsCenterAccountsCount(where: SmsCenterAccountFilterInput): Int!
  smsMessage(where: SmsMessageFilterInput): SmsMessage
  smsMessageById(id: UUID!): SmsMessage!
  smsMessages(
    order: [SmsMessageSortInput!]
    skip: Int
    take: Int
    where: SmsMessageFilterInput
  ): SmsMessageCollectionSegment
  smsMessagesAny(where: SmsMessageFilterInput): Boolean!
  smsMessagesCount(where: SmsMessageFilterInput): Int!
  smsTemplate(where: SmsTemplateFilterInput): SmsTemplate
  smsTemplateById(id: UUID!): SmsTemplate!
  smsTemplates(
    order: [SmsTemplateSortInput!]
    skip: Int
    take: Int
    where: SmsTemplateFilterInput
  ): SmsTemplateCollectionSegment
  smsTemplatesAny(where: SmsTemplateFilterInput): Boolean!
  smsTemplatesCount(where: SmsTemplateFilterInput): Int!
  templateCell(where: TemplateCellFilterInput): TemplateCell
  templateCellById(id: ID!): TemplateCell!
  templatePostamat(where: TemplatePostamatFilterInput): TemplatePostamat
  templatePostamatById(id: ID!): TemplatePostamat!
  templateSection(where: TemplateSectionFilterInput): TemplateSection
  templateSectionById(id: ID!): TemplateSection!
  templatesCell(
    order: [TemplateCellSortInput!]
    skip: Int
    take: Int
    where: TemplateCellFilterInput
  ): TemplateCellCollectionSegment
  templatesCellAny(where: TemplateCellFilterInput): Boolean!
  templatesCellCount(where: TemplateCellFilterInput): Int!
  templatesPostamat(
    order: [TemplatePostamatSortInput!]
    skip: Int
    take: Int
    where: TemplatePostamatFilterInput
  ): TemplatePostamatCollectionSegment
  templatesPostamatAny(where: TemplatePostamatFilterInput): Boolean!
  templatesPostamatCount(where: TemplatePostamatFilterInput): Int!
  templatesSection(
    order: [TemplateSectionSortInput!]
    skip: Int
    take: Int
    where: TemplateSectionFilterInput
  ): TemplateSectionCollectionSegment
  templatesSectionAny(where: TemplateSectionFilterInput): Boolean!
  templatesSectionCount(where: TemplateSectionFilterInput): Int!
  tenant(where: TenantFilterInput): Tenant
  tenants(
    order: [TenantSortInput!]
    skip: Int
    take: Int
    where: TenantFilterInput
  ): TenantCollectionSegment
  tenantsAny(where: TenantFilterInput): Boolean!
  tenantsCount(where: TenantFilterInput): Int!
}

type ReturnRequest implements CreationAuditedObject & DeletionAuditedObject & Entity & HasCreationTime & HasDeletionTime & HasModificationTime & MayHaveCreator & ModificationAuditedObject & MultiContractor & MultiTenant & Node & SoftDelete {
  atCourier: IdentityUser
  atCourierId: ID
  atLastMile: LastMile
  atLastMileId: ID
  "Причина"
  cause: String
  changesHistory(
    order: [ReturnRequestStatusChangeHistorySortInput!]
    where: ReturnRequestStatusChangeHistoryFilterInput
  ): [ReturnRequestStatusChangeHistory!]!
  "Код"
  code: String!
  "Комментарий для курьера"
  comment: String
  contractor: Contractor!
  contractorId: ID!
  courier: IdentityUser!
  courierId: ID!
  creationTime: DateTime
  creator: IdentityUser
  creatorId: ID
  deleter: IdentityUser
  deleterId: ID
  deletionTime: DateTime
  id: ID!
  isDeleted: Boolean!
  lastModificationTime: DateTime
  lastModifier: IdentityUser
  lastModifierId: ID
  packingPlace: PackingPlace!
  "Статус заявки"
  status: ReturnRequestStatus!
  tenant: Tenant
  tenantId: ID
}

type ReturnRequestCodeAlreadyExistsError implements BusinessError & Error {
  code: String
  details: String
  message: String!
  requestCode: String!
}

type ReturnRequestCollectionSegment {
  items: [ReturnRequest!]
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  totalCount: Int!
}

type ReturnRequestIncorrectStatusError implements BusinessError & Error {
  code: String
  current: ReturnRequestStatus!
  details: String
  message: String!
  next: ReturnRequestStatus!
}

type ReturnRequestLocationNotSpecifiedError implements BusinessError & Error {
  code: String
  details: String
  message: String!
}

type ReturnRequestLockedError implements BusinessError & Error {
  code: String
  details: String
  id: UUID!
  message: String!
  returnRequest: ReturnRequest!
}

type ReturnRequestStatusChangeHistory implements CreationAuditedObject & HasCreationTime & MayHaveCreator & MultiContractor & MultiTenant {
  contractor: Contractor!
  contractorId: ID!
  creationTime: DateTime
  creator: IdentityUser
  creatorId: ID
  returnRequestId: ID!
  "Статус"
  status: ReturnRequestStatus!
  tenant: Tenant
  tenantId: ID
}

type ReturnReturnRequestPayload {
  errors: [ReturnReturnRequestError!]
  returnRequest: ReturnRequest
}

type SelectableContractor {
  id: ID!
  name: String!
}

type SendPackingPlacePayload {
  errors: [SendPackingPlaceError!]
  packingPlace: PackingPlace
}

type SendShipmentRequestPayload {
  errors: [SendShipmentRequestError!]
  shipmentRequest: ShipmentRequest
}

type SerialPortSettings {
  "Скорость передачи для последовательного порта (в бодах)."
  baudRate: Int!
  "Стандартное число битов данных в байте."
  dataBits: Int!
  "Протокол контроля четности."
  parity: Parity!
  "Последовательный порт, в частности, любой из доступных портов COM."
  portName: String!
  "Стандартное число стоповых битов в байте."
  stopBits: StopBits!
}

"COM принтер"
type SerialPrinter {
  "Включен"
  isEnabled: Boolean!
  settings: SerialPortSettings!
}

type ShipmentRequest implements CreationAuditedObject & DeletionAuditedObject & Entity & HasCreationTime & HasDeletionTime & HasModificationTime & MayHaveCreator & ModificationAuditedObject & MultiContractor & MultiTenant & Node & SoftDelete {
  "Причина"
  cause: String
  changesHistory(
    order: [ShipmentRequestStatusChangeHistorySortInput!]
    where: ShipmentRequestStatusChangeHistoryFilterInput
  ): [ShipmentRequestStatusChangeHistory!]!
  "Код"
  code: String!
  "Комментарий для курьера"
  comment: String
  contractor: Contractor!
  contractorId: ID!
  courier: IdentityUser!
  courierId: ID!
  creationTime: DateTime
  creator: IdentityUser
  creatorId: ID
  deleter: IdentityUser
  deleterId: ID
  deletionTime: DateTime
  id: ID!
  isDeleted: Boolean!
  lastMile: LastMile!
  lastMileId: ID!
  lastModificationTime: DateTime
  lastModifier: IdentityUser
  lastModifierId: ID
  packingPlaces: [PackingPlace!]!
  "Статус заявки"
  status: ShipmentRequestStatus!
  tenant: Tenant
  tenantId: ID
}

type ShipmentRequestCodeAlreadyExistsError implements BusinessError & Error {
  code: String
  details: String
  message: String!
  requestCode: String!
}

type ShipmentRequestCollectionSegment {
  items: [ShipmentRequest!]
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  totalCount: Int!
}

type ShipmentRequestIncorrectStatusError implements BusinessError & Error {
  code: String
  current: ShipmentRequestStatus!
  details: String
  message: String!
  next: ShipmentRequestStatus!
}

type ShipmentRequestLockedError implements BusinessError & Error {
  code: String
  details: String
  id: UUID!
  message: String!
  shipmentRequest: ShipmentRequest!
}

type ShipmentRequestStatusChangeHistory implements CreationAuditedObject & HasCreationTime & MayHaveCreator & MultiContractor & MultiTenant {
  contractor: Contractor!
  contractorId: ID!
  creationTime: DateTime
  creator: IdentityUser
  creatorId: ID
  shipmentRequestId: ID!
  "Статус"
  status: ShipmentRequestStatus!
  tenant: Tenant
  tenantId: ID
}

type Size implements CreationAuditedObject & DeletionAuditedObject & Entity & HasCreationTime & HasDeletionTime & HasModificationTime & MayHaveCreator & ModificationAuditedObject & MultiTenant & Node & SoftDelete {
  creationTime: DateTime
  creator: IdentityUser
  creatorId: ID
  deleter: IdentityUser
  deleterId: ID
  deletionTime: DateTime
  id: ID!
  isDeleted: Boolean!
  lastModificationTime: DateTime
  lastModifier: IdentityUser
  lastModifierId: ID
  name: String!
  tenant: Tenant
  tenantId: ID
}

type SizeCollectionSegment {
  items: [Size!]
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  totalCount: Int!
}

type SizeNameAlreadyExistsError implements BusinessError & Error {
  code: String
  details: String
  message: String!
  name: String!
}

type SmsAccountCollectionSegment {
  items: [SmsAccount!]
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  totalCount: Int!
}

type SmsAccountNameAlreadyExistsError implements BusinessError & Error {
  code: String
  details: String
  message: String!
  name: String!
}

"Аккаунт от сервиса https://smsc.ru"
type SmsCenterAccount implements CreationAuditedObject & DeletionAuditedObject & Entity & HasCreationTime & HasDeletionTime & HasModificationTime & MayHaveCreator & ModificationAuditedObject & MultiContractor & MultiTenant & Node & SmsAccount & SoftDelete {
  contractor: Contractor!
  contractorId: ID!
  creationTime: DateTime
  creator: IdentityUser
  creatorId: ID
  deleter: IdentityUser
  deleterId: ID
  deletionTime: DateTime
  id: ID!
  isDeleted: Boolean!
  lastModificationTime: DateTime
  lastModifier: IdentityUser
  lastModifierId: ID
  "Логин"
  login: String!
  "Наименование аккаунта"
  name: String!
  "Имя отправителя"
  sender: String!
  tenant: Tenant
  tenantId: ID
}

type SmsCenterAccountCollectionSegment {
  items: [SmsCenterAccount!]
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  totalCount: Int!
}

type SmsMessage implements CreationAuditedObject & DeletionAuditedObject & Entity & HasCreationTime & HasDeletionTime & HasModificationTime & MayHaveCreator & ModificationAuditedObject & MultiContractor & MultiTenant & Node & SoftDelete {
  accountId: ID!
  contractor: Contractor!
  contractorId: ID!
  creationTime: DateTime
  creator: IdentityUser
  creatorId: ID
  deleter: IdentityUser
  deleterId: ID
  deletionTime: DateTime
  "Ошибка при отправке"
  error: String
  id: ID!
  isDeleted: Boolean!
  "Успешно ли отправлено"
  isSuccess: Boolean!
  lastModificationTime: DateTime
  lastModifier: IdentityUser
  lastModifierId: ID
  "Номер телефона"
  phoneNumber: String!
  tenant: Tenant
  tenantId: ID
  "Текст"
  text: String!
  "Время когда было отправлено"
  timeDispatch: DateTime
}

type SmsMessageCollectionSegment {
  items: [SmsMessage]
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  totalCount: Int!
}

"Смс шаблон"
type SmsTemplate implements CreationAuditedObject & DeletionAuditedObject & Entity & HasCreationTime & HasDeletionTime & HasModificationTime & MayHaveCreator & ModificationAuditedObject & MultiContractor & MultiTenant & Node & SoftDelete {
  "Комментарий"
  comment: String
  contractor: Contractor!
  contractorId: ID!
  creationTime: DateTime
  creator: IdentityUser
  creatorId: ID
  deleter: IdentityUser
  deleterId: ID
  deletionTime: DateTime
  eventType: NotificationEventType!
  id: ID!
  isDeleted: Boolean!
  lastModificationTime: DateTime
  lastModifier: IdentityUser
  lastModifierId: ID
  "Наименование шаблона"
  name: String!
  "Шаблон"
  template: String!
  tenant: Tenant
  tenantId: ID
}

type SmsTemplateCollectionSegment {
  items: [SmsTemplate!]
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  totalCount: Int!
}

type SmsTemplateNameAlreadyExistsError implements BusinessError & Error {
  code: String
  details: String
  message: String!
  name: String!
}

"Шаблон ячейки"
type TemplateCell implements CreationAuditedObject & DeletionAuditedObject & Entity & HasCreationTime & HasDeletionTime & HasModificationTime & MayHaveCreator & ModificationAuditedObject & MultiTenant & Node & SoftDelete {
  creationTime: DateTime
  creator: IdentityUser
  creatorId: ID
  deleter: IdentityUser
  deleterId: ID
  deletionTime: DateTime
  "Высота"
  height: Int!
  id: ID!
  "Ссылка на изображение"
  imageUrl: String
  "Тип шаблона"
  isCell: Boolean!
  isDeleted: Boolean!
  lastModificationTime: DateTime
  lastModifier: IdentityUser
  lastModifierId: ID
  "Наименование"
  name: String!
  size: Size
  sizeId: ID
  tenant: Tenant
  tenantId: ID
  "Ширина"
  width: Int!
}

type TemplateCellCollectionSegment {
  items: [TemplateCell!]
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  totalCount: Int!
}

type TemplateCellNameAlreadyExistsError implements BusinessError & Error {
  code: String
  details: String
  message: String!
  name: String!
}

type TemplateCellSizeIdEmptyError implements BusinessError & Error {
  code: String
  details: String
  message: String!
}

"Шаблон постамата"
type TemplatePostamat implements CreationAuditedObject & DeletionAuditedObject & Entity & HasCreationTime & HasDeletionTime & HasModificationTime & MayHaveCreator & ModificationAuditedObject & MultiTenant & Node & SoftDelete {
  creationTime: DateTime
  creator: IdentityUser
  creatorId: ID
  deleter: IdentityUser
  deleterId: ID
  deletionTime: DateTime
  id: ID!
  isDeleted: Boolean!
  lastModificationTime: DateTime
  lastModifier: IdentityUser
  lastModifierId: ID
  "Наименование"
  name: String!
  "Ид шаблонов секций"
  sections: [TemplatePostamatTemplateSection!]!
  tenant: Tenant
  tenantId: ID
}

type TemplatePostamatCollectionSegment {
  items: [TemplatePostamat!]
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  totalCount: Int!
}

type TemplatePostamatNameAlreadyExistsError implements BusinessError & Error {
  code: String
  details: String
  message: String!
  name: String!
}

type TemplatePostamatTemplateSection implements MultiTenant {
  "Позиция"
  position: Int!
  templatePostamatId: ID!
  templateSection: TemplateSection!
  templateSectionId: ID!
  tenant: Tenant
  tenantId: ID
}

"Шаблон секции"
type TemplateSection implements CreationAuditedObject & DeletionAuditedObject & Entity & HasCreationTime & HasDeletionTime & HasModificationTime & MayHaveCreator & ModificationAuditedObject & MultiTenant & Node & SoftDelete {
  "Ид шаблонов ячеек"
  cells: [TemplateSectionTemplateCell!]!
  creationTime: DateTime
  creator: IdentityUser
  creatorId: ID
  deleter: IdentityUser
  deleterId: ID
  deletionTime: DateTime
  id: ID!
  isDeleted: Boolean!
  lastModificationTime: DateTime
  lastModifier: IdentityUser
  lastModifierId: ID
  "Наименование"
  name: String!
  tenant: Tenant
  tenantId: ID
}

type TemplateSectionCollectionSegment {
  items: [TemplateSection!]
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  totalCount: Int!
}

type TemplateSectionNameAlreadyExistsError implements BusinessError & Error {
  code: String
  details: String
  message: String!
  name: String!
}

type TemplateSectionTemplateCell implements MultiTenant {
  "Позиция"
  position: Int!
  templateCell: TemplateCell!
  templateCellId: ID!
  templateSectionId: ID!
  tenant: Tenant
  tenantId: ID
}

type Tenant implements CreationAuditedObject & DeletionAuditedObject & Entity & HasCreationTime & HasDeletionTime & HasModificationTime & MayHaveCreator & ModificationAuditedObject & Node & SoftDelete {
  creationTime: DateTime
  creator: IdentityUser
  creatorId: ID
  deleter: IdentityUser
  deleterId: ID
  deletionTime: DateTime
  emailForDocuments: String!
  id: ID!
  isDeleted: Boolean!
  lastModificationTime: DateTime
  lastModifier: IdentityUser
  lastModifierId: ID
  name: String!
}

type TenantCollectionSegment {
  items: [Tenant!]
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  totalCount: Int!
}

type TenantNameAlreadyExistsError implements BusinessError & Error {
  code: String
  details: String
  message: String!
  name: String!
  tenant: Tenant!
}

type TimeZone {
  iana: IanaTimeZone!
  windows: WindowsTimeZone!
}

type Timing {
  timeZone: TimeZone!
}

type TypeOrderIsNotCorrectError implements BusinessError & Error {
  code: String
  current: TypeOrder!
  details: String
  message: String!
  verifiable: TypeOrder!
}

type UpdateAccessKeyPayload {
  accessKey: AccessKey
  errors: [UpdateAccessKeyError!]
}

type UpdateCellPayload {
  cell: Cell
  errors: [UpdateCellError!]
}

type UpdateCompanyPayload {
  company: Company
  errors: [UpdateCompanyError!]
}

type UpdateEmexAccountPayload {
  emexAccount: EmexAccount
  errors: [UpdateEmexAccountError!]
}

type UpdateEmexOrderPayload {
  emexOrder: EmexOrder
  errors: [UpdateEmexOrderError!]
}

type UpdateEmexProductPayload {
  emexProduct: EmexProduct
  errors: [UpdateEmexProductError!]
}

type UpdateEmployeePayload {
  errors: [UpdateEmployeeError!]
  identityUser: IdentityUser
}

type UpdateIdentityRolePayload {
  errors: [UpdateIdentityRoleError!]
  identityRole: IdentityRole
}

type UpdateIndividualEntrepreneurPayload {
  errors: [UpdateIndividualEntrepreneurError!]
  individualEntrepreneur: IndividualEntrepreneur
}

type UpdateLastMileAccountsPayload {
  errors: [UpdateLastMileAccountsError!]
  lastMile: LastMile
}

type UpdateLastMileReturnPeriodPayload {
  errors: [UpdateLastMileReturnPeriodError!]
  lastMileReturnPeriod: LastMileReturnPeriod
}

type UpdateLastMileSmsTemplatePayload {
  errors: [UpdateLastMileSmsTemplateError!]
  lastMileSmsTemplate: LastMileSmsTemplate
}

type UpdateLastMileStoragePeriodPayload {
  errors: [UpdateLastMileStoragePeriodError!]
  lastMileStoragePeriod: LastMileStoragePeriod
}

type UpdatePackingPlacePayload {
  errors: [UpdatePackingPlaceError!]
  packingPlace: PackingPlace
}

type UpdatePermissionsPayload {
  boolean: Boolean
  errors: [UpdatePermissionsError!]
}

type UpdatePostamatDisplayPayload {
  errors: [UpdatePostamatDisplayError!]
  postamat: Postamat
}

type UpdatePostamatFilePrinterPayload {
  errors: [UpdatePostamatFilePrinterError!]
  postamat: Postamat
}

type UpdatePostamatNetworkPrinterPayload {
  errors: [UpdatePostamatNetworkPrinterError!]
  postamat: Postamat
}

type UpdatePostamatPayload {
  errors: [UpdatePostamatError!]
  postamat: Postamat
}

type UpdatePostamatScannerPayload {
  errors: [UpdatePostamatScannerError!]
  postamat: Postamat
}

type UpdatePostamatSerialPrinterPayload {
  errors: [UpdatePostamatSerialPrinterError!]
  postamat: Postamat
}

type UpdatePostamatSettingsPayload {
  errors: [UpdatePostamatSettingsError!]
  postamat: Postamat
}

type UpdatePromixControllerPayload {
  errors: [UpdatePromixControllerError!]
  promixController: PromixController
}

type UpdateReturnRequestPayload {
  errors: [UpdateReturnRequestError!]
  returnRequest: ReturnRequest
}

type UpdateShipmentRequestPayload {
  errors: [UpdateShipmentRequestError!]
  shipmentRequest: ShipmentRequest
}

type UpdateSizePayload {
  errors: [UpdateSizeError!]
  size: Size
}

type UpdateSmsCenterAccountPayload {
  errors: [UpdateSmsCenterAccountError!]
  smsCenterAccount: SmsCenterAccount
}

type UpdateSmsTemplatePayload {
  errors: [UpdateSmsTemplateError!]
  smsTemplate: SmsTemplate
}

type UpdateTemplateCellPayload {
  errors: [UpdateTemplateCellError!]
  templateCell: TemplateCell
}

type UpdateTemplatePostamatPayload {
  errors: [UpdateTemplatePostamatError!]
  templatePostamat: TemplatePostamat
}

type UpdateTemplateSectionPayload {
  errors: [UpdateTemplateSectionError!]
  templateSection: TemplateSection
}

type UpdateTenantPayload {
  errors: [UpdateTenantError!]
  tenant: Tenant
}

type UpdateTopologyPayload {
  errors: [UpdateTopologyError!]
  postamat: Postamat
}

type ValidationError implements Error {
  message: String!
}

type WindowsTimeZone {
  timeZoneId: String!
}

type _SchemaDefinition {
  document: String!
  extensionDocuments: [String!]!
  name: String!
}

enum AddressFamily {
  APPLE_TALK
  ATM
  BANYAN
  CCITT
  CHAOS
  CLUSTER
  CONTROLLER_AREA_NETWORK
  DATA_KIT
  DATA_LINK
  DEC_NET
  ECMA
  FIRE_FOX
  HYPER_CHANNEL
  IEEE12844
  IMP_LINK
  INTER_NETWORK
  INTER_NETWORK_V6
  IPX
  IRDA
  ISO
  LAT
  MAX
  NETWORK_DESIGNERS
  NET_BIOS
  PACKET
  PUP
  SNA
  UNIX
  UNKNOWN
  UNSPECIFIED
  VOICE_VIEW
}

enum ApplyPolicy {
  AFTER_RESOLVER
  BEFORE_RESOLVER
}

enum CellStatus {
  "Занята товаром"
  BUSY
  "Свободна"
  FREE
  "Зарезервирована"
  RESERVED
  "Зарезервирована для возврата"
  RESERVED_FOR_RETURN
  "Вернули товар"
  RETURNED
}

enum EmexOrderStatus {
  ACCEPTED
  CREATED
  ISSUED
  PARTIALLY_ACCEPTED
  PARTIALLY_ISSUED
  PARTIALLY_SENT
  RETURN
  SENT
}

enum EmexProductStatus {
  ACCEPTED
  CREATED
  ISSUED
  RETURN
  SENT
}

"Тип баланса"
enum EmexTypeBalance {
  "Оплата с баланса Emex"
  EMEX
  "Оплата картой при получении"
  NONE
}

"Тип оплаты"
enum EmexTypePayment {
  "Полная оплата картой при получении"
  FULL_CASHLESS
  "Предоплата"
  PREPAYMENT
}

enum LastMileStatus {
  ACTIVATED
  DEACTIVATED
}

enum LogLevel {
  CRITICAL
  DEBUG
  ERROR
  INFORMATION
  NONE
  TRACE
  WARNING
}

"События для уведомлений"
enum NotificationEventType {
  "Принятие упаковочного места в последней миле"
  PACKING_PLACE_ACCEPTING
  "Отмена упаковочного места"
  PACKING_PLACE_CANCELED
  "Выдача упаковочного места"
  PACKING_PLACE_ISSUING
  "Возврат упаковочного места"
  PACKING_PLACE_RETURNING
  "Отправка упаковочного места"
  PACKING_PLACE_SENDING
  "Пин код для получения товара"
  PIN_FOR_ISSUING
  "Пин код для возврата товара"
  PIN_FOR_RETURNING
}

"Статус упаковочного места"
enum PackingPlaceStatus {
  Accepted
  Cancelled
  Created
  InProcessReturn
  InProcessSend
  Issued
  Returned
  Sent
}

enum Parity {
  EVEN
  MARK
  NONE
  ODD
  SPACE
}

"Статус заявки на возврат упаковочного места"
enum ReturnRequestStatus {
  AtCourier
  Canceled
  InLastMile
  Returned
}

"Статус заявки на отправку упаковочных мест в последнюю милю"
enum ShipmentRequestStatus {
  Canceled
  Created
  PartiallyAccepted
  Sent
}

enum SortEnumType {
  ASC
  DESC
}

enum StopBits {
  NONE
  ONE
  ONE_POINT_FIVE
  TWO
}

enum TypeCell {
  CELL
  SERVICE
  VIRTUAL
}

enum TypeOrder {
  Emex
}

"The `DateTime` scalar represents an ISO-8601 compliant date time type."
scalar DateTime

"The built-in `Decimal` scalar type."
scalar Decimal

"The `Long` scalar type represents non-fractional signed whole 64-bit numeric values. Long can represent values between -(2^63) and 2^63 - 1."
scalar Long

scalar UUID

input AccessKeyFilterInput {
  and: [AccessKeyFilterInput!]
  "Штрих код"
  barcode: StringOperationFilterInput
  contractorId: IdOperationFilterInput
  "Истекает в"
  expiresDt: ComparableNullableOfDateTimeOperationFilterInput
  id: IdOperationFilterInput
  identityUserId: IdOperationFilterInput
  "Временный"
  isDisposable: BooleanOperationFilterInput
  "Последний вход"
  lastEntrance: ComparableNullableOfDateTimeOperationFilterInput
  or: [AccessKeyFilterInput!]
  tenantId: ComparableNullableOfGuidOperationFilterInput
}

input AccessKeySortInput {
  "Штрих код"
  barcode: SortEnumType
  contractorId: SortEnumType
  "Истекает в"
  expiresDt: SortEnumType
  id: SortEnumType
  identityUserId: SortEnumType
  "Временный"
  isDisposable: SortEnumType
  "Последний вход"
  lastEntrance: SortEnumType
  tenantId: SortEnumType
}

"Реквизиты банковского счета"
input AccountBankFilterInput {
  and: [AccountBankFilterInput!]
  "Наименование банка"
  bankName: StringOperationFilterInput
  "БИК - банковский идентификационный код"
  bic: StringOperationFilterInput
  "Корреспондентский счёт"
  correspondentAccount: StringOperationFilterInput
  or: [AccountBankFilterInput!]
  "Расчетный счет"
  paymentAccount: StringOperationFilterInput
}

"Реквизиты банковского счета"
input AccountBankInput {
  """
  Наименование банка
  Required
  Max Length: 70
  """
  bankName: String!
  """
  БИК - банковский идентификационный код
  Required
  Length: 9
  """
  bic: String!
  """
  Корреспондентский счёт
  Required
  Length: 20
  """
  correspondentAccount: String!
  """
  Расчетный счет
  Required
  Length: 20
  """
  paymentAccount: String!
}

"Реквизиты банковского счета"
input AccountBankSortInput {
  "Наименование банка"
  bankName: SortEnumType
  "БИК - банковский идентификационный код"
  bic: SortEnumType
  "Корреспондентский счёт"
  correspondentAccount: SortEnumType
  "Расчетный счет"
  paymentAccount: SortEnumType
}

input ActivateCellInput {
  cellId: ID!
  postamatId: ID!
}

input ActivatePostamatInput {
  token: String!
}

input AddressFamilyOperationFilterInput {
  eq: AddressFamily
  in: [AddressFamily!]
  neq: AddressFamily
  nin: [AddressFamily!]
}

input BooleanOperationFilterInput {
  eq: Boolean
  neq: Boolean
}

input CancelReturnRequestInput {
  id: ID!
}

input CancelShipmentRequestInput {
  id: ID!
}

"Отображение"
input CellDisplayFilterInput {
  and: [CellDisplayFilterInput!]
  cellId: ComparableNullableOfGuidOperationFilterInput
  contractorId: IdOperationFilterInput
  or: [CellDisplayFilterInput!]
  templateCellId: IdOperationFilterInput
  tenantId: ComparableNullableOfGuidOperationFilterInput
  "Позиция по координате X"
  x: ComparableInt32OperationFilterInput
  "Позиция по координате Y"
  y: ComparableInt32OperationFilterInput
}

input CellDisplayInput {
  cellId: ID
  """
  Required
  """
  templateCellId: ID!
  """
  Required
  """
  x: Int!
  """
  Required
  """
  y: Int!
}

"Отображение"
input CellDisplaySortInput {
  cellId: SortEnumType
  contractorId: SortEnumType
  postamatId: SortEnumType
  templateCellId: SortEnumType
  tenantId: SortEnumType
  "Позиция по координате X"
  x: SortEnumType
  "Позиция по координате Y"
  y: SortEnumType
}

"Ячейка"
input CellFilterInput {
  and: [CellFilterInput!]
  "ШК"
  barcode: StringOperationFilterInput
  contractorId: IdOperationFilterInput
  creationTime: ComparableDateTimeOperationFilterInput
  creatorId: ComparableNullableOfGuidOperationFilterInput
  deleterId: ComparableNullableOfGuidOperationFilterInput
  deletionTime: ComparableNullableOfDateTimeOperationFilterInput
  id: IdOperationFilterInput
  isDeleted: BooleanOperationFilterInput
  "Активирована"
  isEnable: BooleanOperationFilterInput
  lastModificationTime: ComparableNullableOfDateTimeOperationFilterInput
  lastModifierId: ComparableNullableOfGuidOperationFilterInput
  lockId: ComparableNullableOfGuidOperationFilterInput
  "Наименование"
  name: StringOperationFilterInput
  or: [CellFilterInput!]
  "Пин-код"
  pinCode: StringOperationFilterInput
  "Места в ячейке"
  places: ListFilterInputTypeOfPlaceInCellFilterInput
  "Приоритет использования"
  priority: ComparableInt32OperationFilterInput
  "Сервисный пин-код"
  servicePinCode: StringOperationFilterInput
  sizeId: ComparableNullableOfGuidOperationFilterInput
  "Статус"
  status: CellStatusOperationFilterInput
  tenantId: ComparableNullableOfGuidOperationFilterInput
  "Тип ячейки"
  type: TypeCellOperationFilterInput
}

"Ячейка"
input CellSortInput {
  "ШК"
  barcode: SortEnumType
  contractorId: SortEnumType
  creationTime: SortEnumType
  creatorId: SortEnumType
  deleterId: SortEnumType
  deletionTime: SortEnumType
  id: SortEnumType
  isDeleted: SortEnumType
  "Активирована"
  isEnable: SortEnumType
  lastModificationTime: SortEnumType
  lastModifierId: SortEnumType
  lockId: SortEnumType
  "Наименование"
  name: SortEnumType
  "Пин-код"
  pinCode: SortEnumType
  postamatId: SortEnumType
  "Приоритет использования"
  priority: SortEnumType
  "Сервисный пин-код"
  servicePinCode: SortEnumType
  sizeId: SortEnumType
  "Статус"
  status: SortEnumType
  tenantId: SortEnumType
  "Тип ячейки"
  type: SortEnumType
}

input CellStatusOperationFilterInput {
  eq: CellStatus
  in: [CellStatus!]
  neq: CellStatus
  nin: [CellStatus!]
}

"Компания"
input CompanyFilterInput {
  "Реквизиты банковского счета"
  accountBank: AccountBankFilterInput
  "Фактический адрес"
  actualAddress: StringOperationFilterInput
  "Адрес"
  address: StringOperationFilterInput
  and: [CompanyFilterInput!]
  concurrencyStamp: StringOperationFilterInput
  creationTime: ComparableDateTimeOperationFilterInput
  creatorId: ComparableNullableOfGuidOperationFilterInput
  deleterId: ComparableNullableOfGuidOperationFilterInput
  deletionTime: ComparableNullableOfDateTimeOperationFilterInput
  extraProperties: ExtraPropertyDictionaryFilterInput
  id: IdOperationFilterInput
  "ИНН - Индивидуальный номер налогоплательщика"
  inn: StringOperationFilterInput
  isDeleted: BooleanOperationFilterInput
  isHost: BooleanOperationFilterInput
  "КПП - Код причины постановки"
  kpp: StringOperationFilterInput
  lastModificationTime: ComparableNullableOfDateTimeOperationFilterInput
  lastModifierId: ComparableNullableOfGuidOperationFilterInput
  "Почтовый адрес"
  mailingAddress: StringOperationFilterInput
  "Наименование"
  name: StringOperationFilterInput
  "ОГРН - Основной государственный регистрационный номер"
  ogrn: StringOperationFilterInput
  "Код ОКПО - Код в Общероссийском классификаторе предприятий и организаций"
  okpo: StringOperationFilterInput
  or: [CompanyFilterInput!]
  tenantId: ComparableNullableOfGuidOperationFilterInput
}

"Компания"
input CompanySortInput {
  "Реквизиты банковского счета"
  accountBank: AccountBankSortInput
  "Фактический адрес"
  actualAddress: SortEnumType
  "Адрес"
  address: SortEnumType
  concurrencyStamp: SortEnumType
  creationTime: SortEnumType
  creatorId: SortEnumType
  deleterId: SortEnumType
  deletionTime: SortEnumType
  id: SortEnumType
  "ИНН - Индивидуальный номер налогоплательщика"
  inn: SortEnumType
  isDeleted: SortEnumType
  isHost: SortEnumType
  "КПП - Код причины постановки"
  kpp: SortEnumType
  lastModificationTime: SortEnumType
  lastModifierId: SortEnumType
  "Почтовый адрес"
  mailingAddress: SortEnumType
  "Наименование"
  name: SortEnumType
  "ОГРН - Основной государственный регистрационный номер"
  ogrn: SortEnumType
  "Код ОКПО - Код в Общероссийском классификаторе предприятий и организаций"
  okpo: SortEnumType
  tenantId: SortEnumType
}

input ComparableDateTimeOperationFilterInput {
  eq: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  neq: DateTime
  ngt: DateTime
  ngte: DateTime
  nin: [DateTime!]
  nlt: DateTime
  nlte: DateTime
}

input ComparableDecimalOperationFilterInput {
  eq: Decimal
  gt: Decimal
  gte: Decimal
  in: [Decimal!]
  lt: Decimal
  lte: Decimal
  neq: Decimal
  ngt: Decimal
  ngte: Decimal
  nin: [Decimal!]
  nlt: Decimal
  nlte: Decimal
}

input ComparableInt32OperationFilterInput {
  eq: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  neq: Int
  ngt: Int
  ngte: Int
  nin: [Int!]
  nlt: Int
  nlte: Int
}

input ComparableInt64OperationFilterInput {
  eq: Long
  gt: Long
  gte: Long
  in: [Long!]
  lt: Long
  lte: Long
  neq: Long
  ngt: Long
  ngte: Long
  nin: [Long!]
  nlt: Long
  nlte: Long
}

input ComparableNullableOfDateTimeOffsetOperationFilterInput {
  eq: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime]
  lt: DateTime
  lte: DateTime
  neq: DateTime
  ngt: DateTime
  ngte: DateTime
  nin: [DateTime]
  nlt: DateTime
  nlte: DateTime
}

input ComparableNullableOfDateTimeOperationFilterInput {
  eq: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime]
  lt: DateTime
  lte: DateTime
  neq: DateTime
  ngt: DateTime
  ngte: DateTime
  nin: [DateTime]
  nlt: DateTime
  nlte: DateTime
}

input ComparableNullableOfGuidOperationFilterInput {
  eq: UUID
  gt: UUID
  gte: UUID
  in: [UUID]
  lt: UUID
  lte: UUID
  neq: UUID
  ngt: UUID
  ngte: UUID
  nin: [UUID]
  nlt: UUID
  nlte: UUID
}

"Контрагент"
input ContractorFilterInput {
  "Реквизиты банковского счета"
  accountBank: AccountBankFilterInput
  "Фактический адрес"
  actualAddress: StringOperationFilterInput
  "Адрес"
  address: StringOperationFilterInput
  and: [ContractorFilterInput!]
  concurrencyStamp: StringOperationFilterInput
  creationTime: ComparableDateTimeOperationFilterInput
  creatorId: ComparableNullableOfGuidOperationFilterInput
  deleterId: ComparableNullableOfGuidOperationFilterInput
  deletionTime: ComparableNullableOfDateTimeOperationFilterInput
  extraProperties: ExtraPropertyDictionaryFilterInput
  id: IdOperationFilterInput
  "ИНН - Индивидуальный номер налогоплательщика"
  inn: StringOperationFilterInput
  isDeleted: BooleanOperationFilterInput
  isHost: BooleanOperationFilterInput
  lastModificationTime: ComparableNullableOfDateTimeOperationFilterInput
  lastModifierId: ComparableNullableOfGuidOperationFilterInput
  "Почтовый адрес"
  mailingAddress: StringOperationFilterInput
  "Наименование"
  name: StringOperationFilterInput
  "Код ОКПО - Код в Общероссийском классификаторе предприятий и организаций"
  okpo: StringOperationFilterInput
  or: [ContractorFilterInput!]
  tenantId: ComparableNullableOfGuidOperationFilterInput
}

"Контрагент"
input ContractorSortInput {
  "Реквизиты банковского счета"
  accountBank: AccountBankSortInput
  "Фактический адрес"
  actualAddress: SortEnumType
  "Адрес"
  address: SortEnumType
  concurrencyStamp: SortEnumType
  creationTime: SortEnumType
  creatorId: SortEnumType
  deleterId: SortEnumType
  deletionTime: SortEnumType
  id: SortEnumType
  "ИНН - Индивидуальный номер налогоплательщика"
  inn: SortEnumType
  isDeleted: SortEnumType
  isHost: SortEnumType
  lastModificationTime: SortEnumType
  lastModifierId: SortEnumType
  "Почтовый адрес"
  mailingAddress: SortEnumType
  "Наименование"
  name: SortEnumType
  "Код ОКПО - Код в Общероссийском классификаторе предприятий и организаций"
  okpo: SortEnumType
  tenantId: SortEnumType
}

"Контроллер"
input ControllerBaseFilterInput {
  and: [ControllerBaseFilterInput!]
  contractorId: IdOperationFilterInput
  id: IdOperationFilterInput
  "Замки"
  locks: ListFilterInputTypeOfLockFilterInput
  "Наименование"
  name: StringOperationFilterInput
  or: [ControllerBaseFilterInput!]
  "Настройки serial port"
  settings: SerialPortSettingsFilterInput
  tenantId: ComparableNullableOfGuidOperationFilterInput
}

"Контроллер"
input ControllerBaseSortInput {
  contractorId: SortEnumType
  id: SortEnumType
  "Наименование"
  name: SortEnumType
  postamatId: SortEnumType
  "Настройки serial port"
  settings: SerialPortSettingsSortInput
  tenantId: SortEnumType
}

input CreateAccessKeyInput {
  """
  Required
  Max Length: 100
  """
  barcode: String!
  expiresDt: DateTime
  """
  Required
  """
  identityUserId: ID!
  isDisposable: Boolean!
  """
  Required
  """
  lastMileId: ID!
}

input CreateCellInput {
  """
  ШК
  Required
  Max Length: 50
  """
  barcode: String!
  """
  Наименование
  Required
  Max Length: 50
  """
  name: String!
  """
  Required
  """
  postamatId: ID!
  """
  Required
  """
  typeCell: TypeCell!
}

"Компания"
input CreateCompanyInput {
  """
  Реквизиты банковского счета
  Required
  """
  accountBank: AccountBankInput!
  """
  Фактический адрес
  Max Length: 200
  """
  actualAddress: String
  """
  Адрес
  Required
  Max Length: 200
  """
  address: String!
  """
  ИНН - Индивидуальный номер налогоплательщика
  Required
  Length: 10
  """
  inn: String!
  """
  КПП - Код причины постановки
  Length: 9
  """
  kpp: String
  """
  Почтовый адрес
  Max Length: 200
  """
  mailingAddress: String
  """
  Наименование
  Required
  Max Length: 100
  """
  name: String!
  """
  ОГРН - Основной государственный регистрационный номер
  Length: 13
  """
  ogrn: String
  """
  Код ОКПО - Код в Общероссийском классификаторе предприятий и организаций
  Length: 8
  """
  okpo: String
}

input CreateContractorInput {
  company: CreateCompanyInput
  individualEntrepreneur: CreateIndividualEntrepreneurInput
}

input CreateEmexAccountInput {
  """
  Наименование
  Required
  Max Length: 100
  """
  name: String!
  """
  Required
  Max Length: 255
  """
  password: String!
  """
  Required
  Range from 0 to 1,7976931348623157E+308
  """
  userId: Long!
}

input CreateEmexOrderInput {
  """
  Клиент
  Required
  """
  customer: EmexCustomerInput!
  """
  Внешний ID заказа
  Required
  """
  externalId: String!
  """
  Идентификатор движения Emex
  Required
  Range from 0 to 1,7976931348623157E+308
  """
  globalId: Long!
  """
  Товары
  Required
  Min Length: 1
  """
  products: [EmexProductInput!]!
}

input CreateEmexProductInput {
  orderId: ID!
  product: EmexProductInput!
}

input CreateEmployeeInput {
  """
  Контрагенты
  Required
  Min Length: 1
  """
  contractorIds: [ID!]!
  """
  Email
  Required
  Max Length: 256
  """
  email: String!
  """
  Имя
  Required
  Max Length: 200
  """
  firstName: String!
  """
  Отчество
  Max Length: 200
  """
  middleName: String
  """
  Пароль
  Required
  Max Length: 128
  """
  password: String!
  """
  Номер телефона
  Required
  Min Length: 3
  Max Length: 32
  """
  phoneNumber: String!
  """
  Роли
  Required
  Min Length: 1
  """
  roleIds: [ID!]!
  """
  Фамилия
  Required
  Max Length: 200
  """
  surname: String!
}

input CreateIdentityRoleInput {
  """
  Required
  """
  isDefault: Boolean!
  """
  Required
  """
  isPublic: Boolean!
  """
  Required
  Max Length: 256
  """
  name: String!
}

"Индивидуальный предприниматель"
input CreateIndividualEntrepreneurInput {
  """
  Реквизиты банковского счета
  Required
  """
  accountBank: AccountBankInput!
  """
  Фактический адрес
  Max Length: 200
  """
  actualAddress: String
  """
  Адрес
  Required
  Max Length: 200
  """
  address: String!
  """
  ИНН - Индивидуальный номер налогоплательщика
  Required
  Length: 12
  """
  inn: String!
  """
  Почтовый адрес
  Max Length: 200
  """
  mailingAddress: String
  """
  Наименование
  Required
  Max Length: 100
  """
  name: String!
  """
  ОГРНИП - Основной государственный регистрационный номер индивидуального предпринимателя
  Length: 15
  """
  ogrnip: String
  """
  Код ОКПО - Код в Общероссийском классификаторе предприятий и организаций
  Length: 10
  """
  okpo: String
}

input CreatePackingPlaceInput {
  """
  Required
  Max Length: 255
  """
  barcode: String!
  courierId: ID
  lastMileId: ID
  sizeId: ID
  """
  Required
  """
  typeOrder: TypeOrder!
}

input CreatePostamatInput {
  """
  Адрес
  Required
  Max Length: 200
  """
  address: String!
  defaultCourierId: ID!
  """
  Внешний ID
  Required
  Max Length: 200
  """
  externalId: String!
  """
  Заводской номер
  Required
  Max Length: 100
  """
  factoryNumber: String!
  """
  Наименование
  Required
  Max Length: 255
  """
  name: String!
}

input CreatePromixControllerInput {
  """
  Наименование
  Required
  Max Length: 100
  """
  name: String!
  """
  Required
  """
  postamatId: ID!
  """
  Кол-во контроллеров
  Range from 1 to 2147483647
  """
  quantity: Int!
  """
  Настройки serial port
  Required
  """
  settings: SerialPortSettingsInput!
}

input CreateReturnRequestInput {
  """
  Причина
  Max Length: 255
  """
  cause: String
  """
  Код
  Required
  Max Length: 100
  """
  code: String!
  """
  Комментарий для курьера
  Max Length: 255
  """
  comment: String
  """
  Required
  """
  courierId: ID!
  """
  Required
  """
  packingPlaceId: ID!
}

input CreateShipmentRequestInput {
  """
  Причина
  Max Length: 255
  """
  cause: String
  """
  Код
  Required
  Max Length: 100
  """
  code: String!
  """
  Комментарий для курьера
  Max Length: 255
  """
  comment: String
  """
  Required
  """
  courierId: ID!
  """
  Required
  """
  lastMileId: ID!
  """
  Required
  Min Length: 1
  """
  packingPlaceIds: [ID!]!
}

input CreateSizeInput {
  """
  Наименование
  Required
  Max Length: 255
  """
  name: String!
}

input CreateSmsCenterAccountInput {
  """
  Логин
  Required
  Max Length: 100
  """
  login: String!
  """
  Наименование аккаунта
  Required
  Max Length: 100
  """
  name: String!
  """
  Пароль
  Required
  Max Length: 80
  """
  password: String!
  """
  Имя отправителя
  Required
  Max Length: 50
  """
  sender: String!
}

"Смс шаблон"
input CreateSmsTemplateInput {
  """
  Комментарий
  Max Length: 200
  """
  comment: String
  """
  Required
  """
  eventType: NotificationEventType!
  """
  Наименование шаблона
  Required
  Max Length: 200
  """
  name: String!
  """
  Шаблон
  Required
  Max Length: 200
  """
  template: String!
}

input CreateTemplateCellInput {
  """
  Высота
  Required
  Range from 1 to 2147483647
  """
  height: Int!
  """
  Required
  """
  isCell: Boolean!
  isImage: Boolean!
  """
  Наименование
  Required
  Max Length: 50
  """
  name: String!
  sizeId: ID
  """
  Ширина
  Required
  Range from 1 to 2147483647
  """
  width: Int!
}

input CreateTemplatePostamatInput {
  """
  Наименование
  Required
  Max Length: 50
  """
  name: String!
  """
  Секции
  Required
  Min Length: 1
  """
  sections: [TemplatePostamatTemplateSectionInput!]!
}

input CreateTemplateSectionInput {
  """
  Ячейки
  Required
  Min Length: 1
  """
  cells: [TemplateSectionTemplateCellInput!]!
  """
  Наименование
  Required
  Max Length: 50
  """
  name: String!
}

input CreateTenantInput {
  """
  Required
  Max Length: 256
  """
  adminEmailAddress: String!
  """
  Required
  Max Length: 128
  """
  adminPassword: String!
  """
  Required
  """
  contractor: CreateContractorInput!
  """
  Required
  """
  emailForDocuments: String!
  """
  Required
  Max Length: 256
  """
  name: String!
}

input DeactivateCellInput {
  cellId: ID!
  postamatId: ID!
}

input DeleteAccessKeyInput {
  id: ID!
  lastMileId: ID!
}

input DeleteCellInput {
  cellId: ID!
  postamatId: ID!
}

input DeleteCompanyInput {
  id: ID!
}

input DeleteEmexAccountInput {
  id: ID!
}

input DeleteEmexOrderInput {
  id: ID!
}

input DeleteEmexProductInput {
  orderId: ID!
  productId: ID!
}

input DeleteEmployeeInput {
  id: ID!
}

input DeleteIdentityRoleInput {
  id: ID!
}

input DeleteIndividualEntrepreneurInput {
  id: ID!
}

input DeleteLastMileSmsTemplateInput {
  eventType: NotificationEventType!
  lastMileId: ID!
  typeOrder: TypeOrder!
}

input DeletePackingPlaceInput {
  id: ID!
}

input DeletePostamatInput {
  id: ID!
}

input DeletePromixControllerInput {
  controllerId: ID!
  postamatId: ID!
}

input DeleteReturnRequestInput {
  id: ID!
}

input DeleteShipmentRequestInput {
  id: ID!
}

input DeleteSizeInput {
  id: ID!
}

input DeleteSmsCenterAccountInput {
  id: ID!
}

input DeleteSmsTemplateInput {
  id: ID!
}

input DeleteTemplateCellInput {
  id: ID!
}

input DeleteTemplatePostamatInput {
  id: ID!
}

input DeleteTemplateSectionInput {
  id: ID!
}

input DeleteTenantInput {
  """
  Required
  """
  id: ID!
}

"Emex аккаунт"
input EmexAccountFilterInput {
  and: [EmexAccountFilterInput!]
  concurrencyStamp: StringOperationFilterInput
  contractorId: IdOperationFilterInput
  creationTime: ComparableDateTimeOperationFilterInput
  creatorId: ComparableNullableOfGuidOperationFilterInput
  deleterId: ComparableNullableOfGuidOperationFilterInput
  deletionTime: ComparableNullableOfDateTimeOperationFilterInput
  extraProperties: ExtraPropertyDictionaryFilterInput
  id: IdOperationFilterInput
  isDeleted: BooleanOperationFilterInput
  lastModificationTime: ComparableNullableOfDateTimeOperationFilterInput
  lastModifierId: ComparableNullableOfGuidOperationFilterInput
  "Наименование"
  name: StringOperationFilterInput
  or: [EmexAccountFilterInput!]
  "Пароль оптовика"
  password: StringOperationFilterInput
  tenantId: ComparableNullableOfGuidOperationFilterInput
  "Идентификатор оптовика в системе"
  userId: ComparableInt64OperationFilterInput
}

"Emex аккаунт"
input EmexAccountSortInput {
  concurrencyStamp: SortEnumType
  contractorId: SortEnumType
  creationTime: SortEnumType
  creatorId: SortEnumType
  deleterId: SortEnumType
  deletionTime: SortEnumType
  id: SortEnumType
  isDeleted: SortEnumType
  lastModificationTime: SortEnumType
  lastModifierId: SortEnumType
  "Наименование"
  name: SortEnumType
  "Пароль оптовика"
  password: SortEnumType
  tenantId: SortEnumType
  "Идентификатор оптовика в системе"
  userId: SortEnumType
}

input EmexCustomerFilterInput {
  and: [EmexCustomerFilterInput!]
  concurrencyStamp: StringOperationFilterInput
  contractorId: IdOperationFilterInput
  creationTime: ComparableDateTimeOperationFilterInput
  creatorId: ComparableNullableOfGuidOperationFilterInput
  deleterId: ComparableNullableOfGuidOperationFilterInput
  deletionTime: ComparableNullableOfDateTimeOperationFilterInput
  email: StringOperationFilterInput
  externalId: StringOperationFilterInput
  extraProperties: ExtraPropertyDictionaryFilterInput
  id: IdOperationFilterInput
  isDeleted: BooleanOperationFilterInput
  lastModificationTime: ComparableNullableOfDateTimeOperationFilterInput
  lastModifierId: ComparableNullableOfGuidOperationFilterInput
  name: StringOperationFilterInput
  or: [EmexCustomerFilterInput!]
  phone: StringOperationFilterInput
  tenantId: ComparableNullableOfGuidOperationFilterInput
}

"Клиент Emex"
input EmexCustomerInput {
  """
  Email
  Max Length: 255
  """
  email: String
  """
  Внешний ID
  Required
  Max Length: 255
  """
  externalId: String!
  """
  ФИО
  Required
  Max Length: 255
  """
  name: String!
  """
  Телефон
  Required
  Min Length: 3
  Max Length: 32
  """
  phone: String!
}

input EmexCustomerSortInput {
  concurrencyStamp: SortEnumType
  contractorId: SortEnumType
  creationTime: SortEnumType
  creatorId: SortEnumType
  deleterId: SortEnumType
  deletionTime: SortEnumType
  email: SortEnumType
  externalId: SortEnumType
  id: SortEnumType
  isDeleted: SortEnumType
  lastModificationTime: SortEnumType
  lastModifierId: SortEnumType
  name: SortEnumType
  phone: SortEnumType
  tenantId: SortEnumType
}

"Заказ Emex"
input EmexOrderFilterInput {
  and: [EmexOrderFilterInput!]
  concurrencyStamp: StringOperationFilterInput
  contractorId: IdOperationFilterInput
  creationTime: ComparableDateTimeOperationFilterInput
  creatorId: ComparableNullableOfGuidOperationFilterInput
  customerId: IdOperationFilterInput
  deleterId: ComparableNullableOfGuidOperationFilterInput
  deletionTime: ComparableNullableOfDateTimeOperationFilterInput
  externalId: StringOperationFilterInput
  extraProperties: ExtraPropertyDictionaryFilterInput
  "Идентификатор движения Emex"
  globalId: ComparableInt64OperationFilterInput
  id: IdOperationFilterInput
  isDeleted: BooleanOperationFilterInput
  isLocked: BooleanOperationFilterInput
  lastModificationTime: ComparableNullableOfDateTimeOperationFilterInput
  lastModifierId: ComparableNullableOfGuidOperationFilterInput
  or: [EmexOrderFilterInput!]
  products: ListFilterInputTypeOfEmexProductFilterInput
  status: EmexOrderStatusOperationFilterInput
  tenantId: ComparableNullableOfGuidOperationFilterInput
}

"Заказ Emex"
input EmexOrderSortInput {
  concurrencyStamp: SortEnumType
  contractorId: SortEnumType
  creationTime: SortEnumType
  creatorId: SortEnumType
  customerId: SortEnumType
  deleterId: SortEnumType
  deletionTime: SortEnumType
  externalId: SortEnumType
  "Идентификатор движения Emex"
  globalId: SortEnumType
  id: SortEnumType
  isDeleted: SortEnumType
  isLocked: SortEnumType
  lastModificationTime: SortEnumType
  lastModifierId: SortEnumType
  status: SortEnumType
  tenantId: SortEnumType
}

input EmexOrderStatusOperationFilterInput {
  eq: EmexOrderStatus
  in: [EmexOrderStatus!]
  neq: EmexOrderStatus
  nin: [EmexOrderStatus!]
}

input EmexProductAssignToPackingPlaceInput {
  orderId: ID!
  packingPlaceId: ID!
  productId: ID!
}

"Товар Emex"
input EmexProductFilterInput {
  and: [EmexProductFilterInput!]
  "Штрих код"
  barcode: StringOperationFilterInput
  contractorId: IdOperationFilterInput
  creationTime: ComparableDateTimeOperationFilterInput
  creatorId: ComparableNullableOfGuidOperationFilterInput
  deleterId: ComparableNullableOfGuidOperationFilterInput
  deletionTime: ComparableNullableOfDateTimeOperationFilterInput
  "Грузотаможенная декларация"
  gtd: StringOperationFilterInput
  id: IdOperationFilterInput
  isDeleted: BooleanOperationFilterInput
  isLocked: BooleanOperationFilterInput
  lastModificationTime: ComparableNullableOfDateTimeOperationFilterInput
  lastModifierId: ComparableNullableOfGuidOperationFilterInput
  "Производитель"
  manufacturer: StringOperationFilterInput
  "Страна производитель"
  manufacturerCountry: StringOperationFilterInput
  "Код страны производителя"
  manufacturerCountryCode: StringOperationFilterInput
  "Маркировка"
  marking: StringOperationFilterInput
  "Название"
  name: StringOperationFilterInput
  or: [EmexProductFilterInput!]
  orderId: IdOperationFilterInput
  "Ид упаковочного места"
  packingPlaceId: IdOperationFilterInput
  "Цена"
  price: ComparableDecimalOperationFilterInput
  "Кол-во"
  quantity: ComparableDecimalOperationFilterInput
  status: EmexProductStatusOperationFilterInput
  "Сумма"
  sum: ComparableDecimalOperationFilterInput
  tenantId: ComparableNullableOfGuidOperationFilterInput
  "Тип баланса"
  typeBalance: EmexTypeBalanceOperationFilterInput
  "Тип оплаты"
  typePayment: EmexTypePaymentOperationFilterInput
  "Ставка НДС"
  vat: ComparableDecimalOperationFilterInput
  "Артикул"
  vendorCode: StringOperationFilterInput
}

input EmexProductInput {
  """
  Штрих код
  Max Length: 255
  """
  barcode: String
  """
  Грузотаможенная декларация
  Max Length: 255
  """
  gtd: String
  """
  Производитель
  Required
  Max Length: 255
  """
  manufacturer: String!
  """
  Страна производитель
  Max Length: 255
  """
  manufacturerCountry: String
  """
  Код страны производителя
  Max Length: 255
  """
  manufacturerCountryCode: String
  """
  Маркировка
  Max Length: 255
  """
  marking: String
  """
  Название
  Required
  Max Length: 255
  """
  name: String!
  """
  Required
  """
  packingPlaceId: ID!
  """
  Цена
  Range from 0 to 1,7976931348623157E+308
  """
  price: Decimal!
  """
  Кол-во
  Required
  Range from 0 to 1,7976931348623157E+308
  """
  quantity: Decimal!
  """
  Сумма
  Range from 0 to 1,7976931348623157E+308
  """
  sum: Decimal!
  """
  Тип баланса
  Required
  """
  typeBalance: EmexTypeBalance!
  """
  Тип оплаты
  Required
  """
  typePayment: EmexTypePayment!
  """
  Ставка НДС
  Range from 0 to 1,7976931348623157E+308
  """
  vat: Decimal!
  """
  Артикул
  Required
  Max Length: 255
  """
  vendorCode: String!
}

"Товар Emex"
input EmexProductSortInput {
  "Штрих код"
  barcode: SortEnumType
  contractorId: SortEnumType
  creationTime: SortEnumType
  creatorId: SortEnumType
  deleterId: SortEnumType
  deletionTime: SortEnumType
  "Грузотаможенная декларация"
  gtd: SortEnumType
  id: SortEnumType
  isDeleted: SortEnumType
  isLocked: SortEnumType
  lastModificationTime: SortEnumType
  lastModifierId: SortEnumType
  "Производитель"
  manufacturer: SortEnumType
  "Страна производитель"
  manufacturerCountry: SortEnumType
  "Код страны производителя"
  manufacturerCountryCode: SortEnumType
  "Маркировка"
  marking: SortEnumType
  "Название"
  name: SortEnumType
  orderId: SortEnumType
  "Ид упаковочного места"
  packingPlaceId: SortEnumType
  "Цена"
  price: SortEnumType
  "Кол-во"
  quantity: SortEnumType
  status: SortEnumType
  "Сумма"
  sum: SortEnumType
  tenantId: SortEnumType
  "Тип баланса"
  typeBalance: SortEnumType
  "Тип оплаты"
  typePayment: SortEnumType
  "Ставка НДС"
  vat: SortEnumType
  "Артикул"
  vendorCode: SortEnumType
}

input EmexProductStatusOperationFilterInput {
  eq: EmexProductStatus
  in: [EmexProductStatus!]
  neq: EmexProductStatus
  nin: [EmexProductStatus!]
}

input EmexTypeBalanceOperationFilterInput {
  eq: EmexTypeBalance
  in: [EmexTypeBalance!]
  neq: EmexTypeBalance
  nin: [EmexTypeBalance!]
}

input EmexTypePaymentOperationFilterInput {
  eq: EmexTypePayment
  in: [EmexTypePayment!]
  neq: EmexTypePayment
  nin: [EmexTypePayment!]
}

input ExtraPropertyDictionaryFilterInput {
  and: [ExtraPropertyDictionaryFilterInput!]
  comparer: IEqualityComparerOfStringFilterInput
  count: ComparableInt32OperationFilterInput
  keys: ListStringOperationFilterInput
  or: [ExtraPropertyDictionaryFilterInput!]
  values: ListFilterInputTypeOfObjectFilterInput
}

"Файловый принтер"
input FilePrinterFilterInput {
  and: [FilePrinterFilterInput!]
  "Путь к файлу"
  filePath: StringOperationFilterInput
  "Включен"
  isEnabled: BooleanOperationFilterInput
  or: [FilePrinterFilterInput!]
}

"Файловый принтер"
input FilePrinterSortInput {
  "Путь к файлу"
  filePath: SortEnumType
  "Включен"
  isEnabled: SortEnumType
}

input IEqualityComparerOfStringFilterInput {
  and: [IEqualityComparerOfStringFilterInput!]
  or: [IEqualityComparerOfStringFilterInput!]
}

input IPAddressFilterInput {
  address: ComparableInt64OperationFilterInput
  addressFamily: AddressFamilyOperationFilterInput
  and: [IPAddressFilterInput!]
  isIPv4MappedToIPv6: BooleanOperationFilterInput
  isIPv6LinkLocal: BooleanOperationFilterInput
  isIPv6Multicast: BooleanOperationFilterInput
  isIPv6SiteLocal: BooleanOperationFilterInput
  isIPv6Teredo: BooleanOperationFilterInput
  isIPv6UniqueLocal: BooleanOperationFilterInput
  or: [IPAddressFilterInput!]
  scopeId: ComparableInt64OperationFilterInput
}

input IPAddressSortInput {
  address: SortEnumType
  addressFamily: SortEnumType
  isIPv4MappedToIPv6: SortEnumType
  isIPv6LinkLocal: SortEnumType
  isIPv6Multicast: SortEnumType
  isIPv6SiteLocal: SortEnumType
  isIPv6Teredo: SortEnumType
  isIPv6UniqueLocal: SortEnumType
  scopeId: SortEnumType
}

input IdOperationFilterInput {
  eq: ID
  in: [ID]
  neq: ID
  nin: [ID]
}

input IdentityRoleClaimFilterInput {
  and: [IdentityRoleClaimFilterInput!]
  claimType: StringOperationFilterInput
  claimValue: StringOperationFilterInput
  id: IdOperationFilterInput
  or: [IdentityRoleClaimFilterInput!]
  roleId: IdOperationFilterInput
  tenantId: ComparableNullableOfGuidOperationFilterInput
}

input IdentityRoleFilterInput {
  and: [IdentityRoleFilterInput!]
  claims: ListFilterInputTypeOfIdentityRoleClaimFilterInput
  concurrencyStamp: StringOperationFilterInput
  extraProperties: ExtraPropertyDictionaryFilterInput
  id: IdOperationFilterInput
  isDefault: BooleanOperationFilterInput
  isPublic: BooleanOperationFilterInput
  isStatic: BooleanOperationFilterInput
  name: StringOperationFilterInput
  normalizedName: StringOperationFilterInput
  or: [IdentityRoleFilterInput!]
  tenantId: ComparableNullableOfGuidOperationFilterInput
}

input IdentityRoleSortInput {
  concurrencyStamp: SortEnumType
  id: SortEnumType
  isDefault: SortEnumType
  isPublic: SortEnumType
  isStatic: SortEnumType
  name: SortEnumType
  normalizedName: SortEnumType
  tenantId: SortEnumType
}

input IdentityUserClaimFilterInput {
  and: [IdentityUserClaimFilterInput!]
  claimType: StringOperationFilterInput
  claimValue: StringOperationFilterInput
  id: IdOperationFilterInput
  or: [IdentityUserClaimFilterInput!]
  tenantId: ComparableNullableOfGuidOperationFilterInput
  userId: IdOperationFilterInput
}

input IdentityUserFilterInput {
  accessFailedCount: ComparableInt32OperationFilterInput
  and: [IdentityUserFilterInput!]
  claims: ListFilterInputTypeOfIdentityUserClaimFilterInput
  concurrencyStamp: StringOperationFilterInput
  creationTime: ComparableDateTimeOperationFilterInput
  creatorId: ComparableNullableOfGuidOperationFilterInput
  deleterId: ComparableNullableOfGuidOperationFilterInput
  deletionTime: ComparableNullableOfDateTimeOperationFilterInput
  email: StringOperationFilterInput
  emailConfirmed: BooleanOperationFilterInput
  extraProperties: ExtraPropertyDictionaryFilterInput
  id: IdOperationFilterInput
  isActive: BooleanOperationFilterInput
  isDeleted: BooleanOperationFilterInput
  isExternal: BooleanOperationFilterInput
  lastModificationTime: ComparableNullableOfDateTimeOperationFilterInput
  lastModifierId: ComparableNullableOfGuidOperationFilterInput
  lockoutEnabled: BooleanOperationFilterInput
  lockoutEnd: ComparableNullableOfDateTimeOffsetOperationFilterInput
  logins: ListFilterInputTypeOfIdentityUserLoginFilterInput
  name: StringOperationFilterInput
  normalizedEmail: StringOperationFilterInput
  normalizedUserName: StringOperationFilterInput
  or: [IdentityUserFilterInput!]
  organizationUnits: ListFilterInputTypeOfIdentityUserOrganizationUnitFilterInput
  passwordHash: StringOperationFilterInput
  phoneNumber: StringOperationFilterInput
  phoneNumberConfirmed: BooleanOperationFilterInput
  roles: ListFilterInputTypeOfIdentityUserRoleFilterInput
  securityStamp: StringOperationFilterInput
  surname: StringOperationFilterInput
  tenantId: ComparableNullableOfGuidOperationFilterInput
  tokens: ListFilterInputTypeOfIdentityUserTokenFilterInput
  twoFactorEnabled: BooleanOperationFilterInput
  userName: StringOperationFilterInput
}

input IdentityUserLoginFilterInput {
  and: [IdentityUserLoginFilterInput!]
  loginProvider: StringOperationFilterInput
  or: [IdentityUserLoginFilterInput!]
  providerDisplayName: StringOperationFilterInput
  providerKey: StringOperationFilterInput
  tenantId: ComparableNullableOfGuidOperationFilterInput
  userId: IdOperationFilterInput
}

input IdentityUserOrganizationUnitFilterInput {
  and: [IdentityUserOrganizationUnitFilterInput!]
  creationTime: ComparableDateTimeOperationFilterInput
  creatorId: ComparableNullableOfGuidOperationFilterInput
  or: [IdentityUserOrganizationUnitFilterInput!]
  organizationUnitId: IdOperationFilterInput
  tenantId: ComparableNullableOfGuidOperationFilterInput
  userId: IdOperationFilterInput
}

input IdentityUserRoleFilterInput {
  and: [IdentityUserRoleFilterInput!]
  or: [IdentityUserRoleFilterInput!]
  roleId: IdOperationFilterInput
  tenantId: ComparableNullableOfGuidOperationFilterInput
  userId: IdOperationFilterInput
}

input IdentityUserSortInput {
  accessFailedCount: SortEnumType
  concurrencyStamp: SortEnumType
  creationTime: SortEnumType
  creatorId: SortEnumType
  deleterId: SortEnumType
  deletionTime: SortEnumType
  email: SortEnumType
  emailConfirmed: SortEnumType
  id: SortEnumType
  isActive: SortEnumType
  isDeleted: SortEnumType
  isExternal: SortEnumType
  lastModificationTime: SortEnumType
  lastModifierId: SortEnumType
  lockoutEnabled: SortEnumType
  lockoutEnd: SortEnumType
  name: SortEnumType
  normalizedEmail: SortEnumType
  normalizedUserName: SortEnumType
  passwordHash: SortEnumType
  phoneNumber: SortEnumType
  phoneNumberConfirmed: SortEnumType
  securityStamp: SortEnumType
  surname: SortEnumType
  tenantId: SortEnumType
  twoFactorEnabled: SortEnumType
  userName: SortEnumType
}

input IdentityUserTokenFilterInput {
  and: [IdentityUserTokenFilterInput!]
  loginProvider: StringOperationFilterInput
  name: StringOperationFilterInput
  or: [IdentityUserTokenFilterInput!]
  tenantId: ComparableNullableOfGuidOperationFilterInput
  userId: IdOperationFilterInput
  value: StringOperationFilterInput
}

"Индивидуальный предприниматель"
input IndividualEntrepreneurFilterInput {
  "Реквизиты банковского счета"
  accountBank: AccountBankFilterInput
  "Фактический адрес"
  actualAddress: StringOperationFilterInput
  "Адрес"
  address: StringOperationFilterInput
  and: [IndividualEntrepreneurFilterInput!]
  concurrencyStamp: StringOperationFilterInput
  creationTime: ComparableDateTimeOperationFilterInput
  creatorId: ComparableNullableOfGuidOperationFilterInput
  deleterId: ComparableNullableOfGuidOperationFilterInput
  deletionTime: ComparableNullableOfDateTimeOperationFilterInput
  extraProperties: ExtraPropertyDictionaryFilterInput
  id: IdOperationFilterInput
  "ИНН - Индивидуальный номер налогоплательщика"
  inn: StringOperationFilterInput
  isDeleted: BooleanOperationFilterInput
  isHost: BooleanOperationFilterInput
  lastModificationTime: ComparableNullableOfDateTimeOperationFilterInput
  lastModifierId: ComparableNullableOfGuidOperationFilterInput
  "Почтовый адрес"
  mailingAddress: StringOperationFilterInput
  "Наименование"
  name: StringOperationFilterInput
  "ОГРНИП - Основной государственный регистрационный номер индивидуального предпринимателя"
  ogrnip: StringOperationFilterInput
  "Код ОКПО - Код в Общероссийском классификаторе предприятий и организаций"
  okpo: StringOperationFilterInput
  or: [IndividualEntrepreneurFilterInput!]
  tenantId: ComparableNullableOfGuidOperationFilterInput
}

"Индивидуальный предприниматель"
input IndividualEntrepreneurSortInput {
  "Реквизиты банковского счета"
  accountBank: AccountBankSortInput
  "Фактический адрес"
  actualAddress: SortEnumType
  "Адрес"
  address: SortEnumType
  concurrencyStamp: SortEnumType
  creationTime: SortEnumType
  creatorId: SortEnumType
  deleterId: SortEnumType
  deletionTime: SortEnumType
  id: SortEnumType
  "ИНН - Индивидуальный номер налогоплательщика"
  inn: SortEnumType
  isDeleted: SortEnumType
  isHost: SortEnumType
  lastModificationTime: SortEnumType
  lastModifierId: SortEnumType
  "Почтовый адрес"
  mailingAddress: SortEnumType
  "Наименование"
  name: SortEnumType
  "ОГРНИП - Основной государственный регистрационный номер индивидуального предпринимателя"
  ogrnip: SortEnumType
  "Код ОКПО - Код в Общероссийском классификаторе предприятий и организаций"
  okpo: SortEnumType
  tenantId: SortEnumType
}

input IssuePackingPlaceInPostamatInput {
  cellId: ID!
  pinCode: String!
  postamatId: ID!
}

input LastMileAccountIdsFilterInput {
  and: [LastMileAccountIdsFilterInput!]
  emexAccountId: ComparableNullableOfGuidOperationFilterInput
  or: [LastMileAccountIdsFilterInput!]
  smsAccountId: ComparableNullableOfGuidOperationFilterInput
}

input LastMileAccountIdsSortInput {
  emexAccountId: SortEnumType
  smsAccountId: SortEnumType
}

"Последняя миля"
input LastMileFilterInput {
  "Ключи доступа"
  accessKeys: ListFilterInputTypeOfAccessKeyFilterInput
  "Ид аккаунтов"
  accountIds: LastMileAccountIdsFilterInput
  "Адрес"
  address: StringOperationFilterInput
  and: [LastMileFilterInput!]
  concurrencyStamp: StringOperationFilterInput
  contractorId: IdOperationFilterInput
  creationTime: ComparableDateTimeOperationFilterInput
  creatorId: ComparableNullableOfGuidOperationFilterInput
  deleterId: ComparableNullableOfGuidOperationFilterInput
  deletionTime: ComparableNullableOfDateTimeOperationFilterInput
  "Внешний ID"
  externalId: StringOperationFilterInput
  extraProperties: ExtraPropertyDictionaryFilterInput
  "Заводской номер"
  factoryNumber: StringOperationFilterInput
  id: IdOperationFilterInput
  isDeleted: BooleanOperationFilterInput
  lastModificationTime: ComparableNullableOfDateTimeOperationFilterInput
  lastModifierId: ComparableNullableOfGuidOperationFilterInput
  "Наименование"
  name: StringOperationFilterInput
  or: [LastMileFilterInput!]
  "Сроки возврата заказов"
  returnPeriods: ListFilterInputTypeOfLastMileReturnPeriodFilterInput
  "Смс шаблоны"
  smsTemplates: ListFilterInputTypeOfLastMileSmsTemplateFilterInput
  "Статус"
  status: LastMileStatusOperationFilterInput
  "Сроки хранения заказов"
  storagePeriods: ListFilterInputTypeOfLastMileStoragePeriodFilterInput
  tenantId: ComparableNullableOfGuidOperationFilterInput
  "Код доступа"
  token: StringOperationFilterInput
}

input LastMileReturnPeriodFilterInput {
  and: [LastMileReturnPeriodFilterInput!]
  contractorId: IdOperationFilterInput
  lastMileId: IdOperationFilterInput
  or: [LastMileReturnPeriodFilterInput!]
  "Период возврата заказа в часах"
  period: ComparableInt32OperationFilterInput
  tenantId: ComparableNullableOfGuidOperationFilterInput
  typeOrder: TypeOrderFilterInput
}

input LastMileReturnPeriodSortInput {
  contractorId: SortEnumType
  lastMileId: SortEnumType
  "Период возврата заказа в часах"
  period: SortEnumType
  tenantId: SortEnumType
  typeOrder: TypeOrderSortInput
}

input LastMileSmsTemplateFilterInput {
  and: [LastMileSmsTemplateFilterInput!]
  contractorId: IdOperationFilterInput
  eventType: NotificationEventTypeOperationFilterInput
  or: [LastMileSmsTemplateFilterInput!]
  smsTemplateId: IdOperationFilterInput
  tenantId: ComparableNullableOfGuidOperationFilterInput
  typeOrder: TypeOrderFilterInput
}

input LastMileSmsTemplateSortInput {
  contractorId: SortEnumType
  eventType: SortEnumType
  lastMileId: SortEnumType
  smsTemplateId: SortEnumType
  tenantId: SortEnumType
  typeOrder: TypeOrderSortInput
}

"Последняя миля"
input LastMileSortInput {
  "Ид аккаунтов"
  accountIds: LastMileAccountIdsSortInput
  "Адрес"
  address: SortEnumType
  concurrencyStamp: SortEnumType
  contractorId: SortEnumType
  creationTime: SortEnumType
  creatorId: SortEnumType
  deleterId: SortEnumType
  deletionTime: SortEnumType
  "Внешний ID"
  externalId: SortEnumType
  "Заводской номер"
  factoryNumber: SortEnumType
  id: SortEnumType
  isDeleted: SortEnumType
  lastModificationTime: SortEnumType
  lastModifierId: SortEnumType
  "Наименование"
  name: SortEnumType
  "Статус"
  status: SortEnumType
  tenantId: SortEnumType
  "Код доступа"
  token: SortEnumType
}

input LastMileStatusOperationFilterInput {
  eq: LastMileStatus
  in: [LastMileStatus!]
  neq: LastMileStatus
  nin: [LastMileStatus!]
}

input LastMileStoragePeriodFilterInput {
  and: [LastMileStoragePeriodFilterInput!]
  contractorId: IdOperationFilterInput
  lastMileId: IdOperationFilterInput
  or: [LastMileStoragePeriodFilterInput!]
  "Период хранения заказа в часах"
  period: ComparableInt32OperationFilterInput
  tenantId: ComparableNullableOfGuidOperationFilterInput
  typeOrder: TypeOrderFilterInput
}

input LastMileStoragePeriodSortInput {
  contractorId: SortEnumType
  lastMileId: SortEnumType
  "Период хранения заказа в часах"
  period: SortEnumType
  tenantId: SortEnumType
  typeOrder: TypeOrderSortInput
}

input ListFilterInputTypeOfAccessKeyFilterInput {
  all: AccessKeyFilterInput
  any: Boolean
  none: AccessKeyFilterInput
  some: AccessKeyFilterInput
}

input ListFilterInputTypeOfCellDisplayFilterInput {
  all: CellDisplayFilterInput
  any: Boolean
  none: CellDisplayFilterInput
  some: CellDisplayFilterInput
}

input ListFilterInputTypeOfCellFilterInput {
  all: CellFilterInput
  any: Boolean
  none: CellFilterInput
  some: CellFilterInput
}

input ListFilterInputTypeOfControllerBaseFilterInput {
  all: ControllerBaseFilterInput
  any: Boolean
  none: ControllerBaseFilterInput
  some: ControllerBaseFilterInput
}

input ListFilterInputTypeOfEmexProductFilterInput {
  all: EmexProductFilterInput
  any: Boolean
  none: EmexProductFilterInput
  some: EmexProductFilterInput
}

input ListFilterInputTypeOfIdentityRoleClaimFilterInput {
  all: IdentityRoleClaimFilterInput
  any: Boolean
  none: IdentityRoleClaimFilterInput
  some: IdentityRoleClaimFilterInput
}

input ListFilterInputTypeOfIdentityUserClaimFilterInput {
  all: IdentityUserClaimFilterInput
  any: Boolean
  none: IdentityUserClaimFilterInput
  some: IdentityUserClaimFilterInput
}

input ListFilterInputTypeOfIdentityUserLoginFilterInput {
  all: IdentityUserLoginFilterInput
  any: Boolean
  none: IdentityUserLoginFilterInput
  some: IdentityUserLoginFilterInput
}

input ListFilterInputTypeOfIdentityUserOrganizationUnitFilterInput {
  all: IdentityUserOrganizationUnitFilterInput
  any: Boolean
  none: IdentityUserOrganizationUnitFilterInput
  some: IdentityUserOrganizationUnitFilterInput
}

input ListFilterInputTypeOfIdentityUserRoleFilterInput {
  all: IdentityUserRoleFilterInput
  any: Boolean
  none: IdentityUserRoleFilterInput
  some: IdentityUserRoleFilterInput
}

input ListFilterInputTypeOfIdentityUserTokenFilterInput {
  all: IdentityUserTokenFilterInput
  any: Boolean
  none: IdentityUserTokenFilterInput
  some: IdentityUserTokenFilterInput
}

input ListFilterInputTypeOfLastMileReturnPeriodFilterInput {
  all: LastMileReturnPeriodFilterInput
  any: Boolean
  none: LastMileReturnPeriodFilterInput
  some: LastMileReturnPeriodFilterInput
}

input ListFilterInputTypeOfLastMileSmsTemplateFilterInput {
  all: LastMileSmsTemplateFilterInput
  any: Boolean
  none: LastMileSmsTemplateFilterInput
  some: LastMileSmsTemplateFilterInput
}

input ListFilterInputTypeOfLastMileStoragePeriodFilterInput {
  all: LastMileStoragePeriodFilterInput
  any: Boolean
  none: LastMileStoragePeriodFilterInput
  some: LastMileStoragePeriodFilterInput
}

input ListFilterInputTypeOfLockFilterInput {
  all: LockFilterInput
  any: Boolean
  none: LockFilterInput
  some: LockFilterInput
}

input ListFilterInputTypeOfObjectFilterInput {
  all: ObjectFilterInput
  any: Boolean
  none: ObjectFilterInput
  some: ObjectFilterInput
}

input ListFilterInputTypeOfPackingPlaceStatusChangeHistoryFilterInput {
  all: PackingPlaceStatusChangeHistoryFilterInput
  any: Boolean
  none: PackingPlaceStatusChangeHistoryFilterInput
  some: PackingPlaceStatusChangeHistoryFilterInput
}

input ListFilterInputTypeOfPlaceInCellFilterInput {
  all: PlaceInCellFilterInput
  any: Boolean
  none: PlaceInCellFilterInput
  some: PlaceInCellFilterInput
}

input ListFilterInputTypeOfReturnRequestStatusChangeHistoryFilterInput {
  all: ReturnRequestStatusChangeHistoryFilterInput
  any: Boolean
  none: ReturnRequestStatusChangeHistoryFilterInput
  some: ReturnRequestStatusChangeHistoryFilterInput
}

input ListFilterInputTypeOfShipmentRequestStatusChangeHistoryFilterInput {
  all: ShipmentRequestStatusChangeHistoryFilterInput
  any: Boolean
  none: ShipmentRequestStatusChangeHistoryFilterInput
  some: ShipmentRequestStatusChangeHistoryFilterInput
}

input ListFilterInputTypeOfTemplatePostamatTemplateSectionFilterInput {
  all: TemplatePostamatTemplateSectionFilterInput
  any: Boolean
  none: TemplatePostamatTemplateSectionFilterInput
  some: TemplatePostamatTemplateSectionFilterInput
}

input ListFilterInputTypeOfTemplateSectionTemplateCellFilterInput {
  all: TemplateSectionTemplateCellFilterInput
  any: Boolean
  none: TemplateSectionTemplateCellFilterInput
  some: TemplateSectionTemplateCellFilterInput
}

input ListFilterInputTypeOfTenantConnectionStringFilterInput {
  all: TenantConnectionStringFilterInput
  any: Boolean
  none: TenantConnectionStringFilterInput
  some: TenantConnectionStringFilterInput
}

input ListStringOperationFilterInput {
  all: StringOperationFilterInput
  any: Boolean
  none: StringOperationFilterInput
  some: StringOperationFilterInput
}

"Замок"
input LockFilterInput {
  "Адрес"
  address: StringOperationFilterInput
  and: [LockFilterInput!]
  contractorId: IdOperationFilterInput
  controllerId: IdOperationFilterInput
  id: IdOperationFilterInput
  or: [LockFilterInput!]
  tenantId: ComparableNullableOfGuidOperationFilterInput
}

"Сетевой принтер"
input NetworkPrinterFilterInput {
  and: [NetworkPrinterFilterInput!]
  "IP адрес"
  ipAddress: IPAddressFilterInput
  "Включен"
  isEnabled: BooleanOperationFilterInput
  or: [NetworkPrinterFilterInput!]
  "Порт"
  port: ComparableInt32OperationFilterInput
  "Циклическое подключение"
  reconnectOnTimeout: BooleanOperationFilterInput
}

"Сетевой принтер"
input NetworkPrinterSortInput {
  "IP адрес"
  ipAddress: IPAddressSortInput
  "Включен"
  isEnabled: SortEnumType
  "Порт"
  port: SortEnumType
  "Циклическое подключение"
  reconnectOnTimeout: SortEnumType
}

input NotificationEventTypeOperationFilterInput {
  eq: NotificationEventType
  in: [NotificationEventType!]
  neq: NotificationEventType
  nin: [NotificationEventType!]
}

input ObjectFilterInput {
  and: [ObjectFilterInput!]
  or: [ObjectFilterInput!]
}

input PackingPlaceFilterInput {
  and: [PackingPlaceFilterInput!]
  "Штрих код"
  barcode: StringOperationFilterInput
  "История изменения статуса"
  changesHistory: ListFilterInputTypeOfPackingPlaceStatusChangeHistoryFilterInput
  concurrencyStamp: StringOperationFilterInput
  contractorId: IdOperationFilterInput
  courierId: ComparableNullableOfGuidOperationFilterInput
  creationTime: ComparableDateTimeOperationFilterInput
  creatorId: ComparableNullableOfGuidOperationFilterInput
  customerId: IdOperationFilterInput
  deleterId: ComparableNullableOfGuidOperationFilterInput
  deletionTime: ComparableNullableOfDateTimeOperationFilterInput
  extraProperties: ExtraPropertyDictionaryFilterInput
  id: IdOperationFilterInput
  isDeleted: BooleanOperationFilterInput
  "Заблокировано от изменений"
  isLocked: BooleanOperationFilterInput
  lastMileId: IdOperationFilterInput
  lastModificationTime: ComparableNullableOfDateTimeOperationFilterInput
  lastModifierId: ComparableNullableOfGuidOperationFilterInput
  or: [PackingPlaceFilterInput!]
  returnRequestId: ComparableNullableOfGuidOperationFilterInput
  shipmentRequestId: ComparableNullableOfGuidOperationFilterInput
  sizeId: IdOperationFilterInput
  "Статус упаковочного места"
  status: PackingPlaceStatusOperationFilterInput
  tenantId: ComparableNullableOfGuidOperationFilterInput
  typeOrder: TypeOrderOperationFilterInput
}

input PackingPlaceSortInput {
  "Штрих код"
  barcode: SortEnumType
  concurrencyStamp: SortEnumType
  contractorId: SortEnumType
  courierId: SortEnumType
  creationTime: SortEnumType
  creatorId: SortEnumType
  customerId: SortEnumType
  deleterId: SortEnumType
  deletionTime: SortEnumType
  id: SortEnumType
  isDeleted: SortEnumType
  "Заблокировано от изменений"
  isLocked: SortEnumType
  lastMileId: SortEnumType
  lastModificationTime: SortEnumType
  lastModifierId: SortEnumType
  returnRequestId: SortEnumType
  shipmentRequestId: SortEnumType
  sizeId: SortEnumType
  "Статус упаковочного места"
  status: PackingPlaceStatusSortInput
  tenantId: SortEnumType
  typeOrder: TypeOrderSortInput
}

"История изменения статуса"
input PackingPlaceStatusChangeHistoryFilterInput {
  and: [PackingPlaceStatusChangeHistoryFilterInput!]
  contractorId: IdOperationFilterInput
  creationTime: ComparableDateTimeOperationFilterInput
  creatorId: ComparableNullableOfGuidOperationFilterInput
  or: [PackingPlaceStatusChangeHistoryFilterInput!]
  "Статус"
  status: PackingPlaceStatusOperationFilterInput
  tenantId: ComparableNullableOfGuidOperationFilterInput
}

"История изменения статуса"
input PackingPlaceStatusChangeHistorySortInput {
  contractorId: SortEnumType
  creationTime: SortEnumType
  creatorId: SortEnumType
  packingPlaceId: SortEnumType
  "Статус"
  status: PackingPlaceStatusSortInput
  tenantId: SortEnumType
}

input PackingPlaceStatusOperationFilterInput {
  eq: PackingPlaceStatus
  in: [PackingPlaceStatus]
  neq: PackingPlaceStatus
  nin: [PackingPlaceStatus]
}

"Статус упаковочного места"
input PackingPlaceStatusSortInput {
  name: SortEnumType
  value: SortEnumType
}

input ParityOperationFilterInput {
  eq: Parity
  in: [Parity!]
  neq: Parity
  nin: [Parity!]
}

input PlaceInCellFilterInput {
  and: [PlaceInCellFilterInput!]
  cellId: IdOperationFilterInput
  contractorId: IdOperationFilterInput
  or: [PlaceInCellFilterInput!]
  packingPlaceId: IdOperationFilterInput
  reserved: BooleanOperationFilterInput
  "Хранить до"
  storeUntil: ComparableNullableOfDateTimeOperationFilterInput
  tenantId: ComparableNullableOfGuidOperationFilterInput
}

input PostamatAssignLockToCellInput {
  cellId: ID!
  lockId: ID!
  postamatId: ID!
}

"Постамат"
input PostamatFilterInput {
  "Ключи доступа"
  accessKeys: ListFilterInputTypeOfAccessKeyFilterInput
  "Ид аккаунтов"
  accountIds: LastMileAccountIdsFilterInput
  "Адрес"
  address: StringOperationFilterInput
  and: [PostamatFilterInput!]
  "Ячейки"
  cells: ListFilterInputTypeOfCellFilterInput
  concurrencyStamp: StringOperationFilterInput
  contractorId: IdOperationFilterInput
  "Контроллеры"
  controllers: ListFilterInputTypeOfControllerBaseFilterInput
  creationTime: ComparableDateTimeOperationFilterInput
  creatorId: ComparableNullableOfGuidOperationFilterInput
  defaultCourierId: IdOperationFilterInput
  deleterId: ComparableNullableOfGuidOperationFilterInput
  deletionTime: ComparableNullableOfDateTimeOperationFilterInput
  "Отображение"
  displays: ListFilterInputTypeOfCellDisplayFilterInput
  "Внешний ID"
  externalId: StringOperationFilterInput
  extraProperties: ExtraPropertyDictionaryFilterInput
  "Заводской номер"
  factoryNumber: StringOperationFilterInput
  "Файловый принтер"
  filePrinter: FilePrinterFilterInput
  id: IdOperationFilterInput
  isDeleted: BooleanOperationFilterInput
  lastModificationTime: ComparableNullableOfDateTimeOperationFilterInput
  lastModifierId: ComparableNullableOfGuidOperationFilterInput
  "Наименование"
  name: StringOperationFilterInput
  "Сетевой принтер"
  networkPrinter: NetworkPrinterFilterInput
  or: [PostamatFilterInput!]
  "Сроки возврата заказов"
  returnPeriods: ListFilterInputTypeOfLastMileReturnPeriodFilterInput
  "Настройки сканера"
  scanner: PostamatScannerFilterInput
  "COM принтер"
  serialPrinter: SerialPrinterFilterInput
  "Настройки"
  settings: PostamatSettingsFilterInput
  "Смс шаблоны"
  smsTemplates: ListFilterInputTypeOfLastMileSmsTemplateFilterInput
  "Статус"
  status: LastMileStatusOperationFilterInput
  "Сроки хранения заказов"
  storagePeriods: ListFilterInputTypeOfLastMileStoragePeriodFilterInput
  tenantId: ComparableNullableOfGuidOperationFilterInput
  "Код доступа"
  token: StringOperationFilterInput
}

input PostamatScannerFilterInput {
  and: [PostamatScannerFilterInput!]
  "Скорость передачи для последовательного порта (в бодах)."
  baudRate: ComparableInt32OperationFilterInput
  "Стандартное число битов данных в байте."
  dataBits: ComparableInt32OperationFilterInput
  or: [PostamatScannerFilterInput!]
  "Протокол контроля четности."
  parity: ParityOperationFilterInput
  "Последовательный порт, в частности, любой из доступных портов COM."
  portName: StringOperationFilterInput
  "Стандартное число стоповых битов в байте."
  stopBits: StopBitsOperationFilterInput
}

input PostamatScannerSortInput {
  "Скорость передачи для последовательного порта (в бодах)."
  baudRate: SortEnumType
  "Стандартное число битов данных в байте."
  dataBits: SortEnumType
  "Протокол контроля четности."
  parity: SortEnumType
  "Последовательный порт, в частности, любой из доступных портов COM."
  portName: SortEnumType
  "Стандартное число стоповых битов в байте."
  stopBits: SortEnumType
}

input PostamatSendNewPinCodeInput {
  phone: String!
  postamatId: ID!
}

input PostamatSettingsFilterInput {
  "Телефон администратора"
  adminPhone: StringOperationFilterInput
  and: [PostamatSettingsFilterInput!]
  "Авто обновление"
  isAutoUpdate: BooleanOperationFilterInput
  or: [PostamatSettingsFilterInput!]
  "Прием только по списку ожидания."
  receptionWaitingListOnly: BooleanOperationFilterInput
}

input PostamatSettingsSortInput {
  "Телефон администратора"
  adminPhone: SortEnumType
  "Авто обновление"
  isAutoUpdate: SortEnumType
  "Прием только по списку ожидания."
  receptionWaitingListOnly: SortEnumType
}

"Постамат"
input PostamatSortInput {
  "Ид аккаунтов"
  accountIds: LastMileAccountIdsSortInput
  "Адрес"
  address: SortEnumType
  concurrencyStamp: SortEnumType
  contractorId: SortEnumType
  creationTime: SortEnumType
  creatorId: SortEnumType
  defaultCourierId: SortEnumType
  deleterId: SortEnumType
  deletionTime: SortEnumType
  "Внешний ID"
  externalId: SortEnumType
  "Заводской номер"
  factoryNumber: SortEnumType
  "Файловый принтер"
  filePrinter: FilePrinterSortInput
  id: SortEnumType
  isDeleted: SortEnumType
  lastModificationTime: SortEnumType
  lastModifierId: SortEnumType
  "Наименование"
  name: SortEnumType
  "Сетевой принтер"
  networkPrinter: NetworkPrinterSortInput
  "Настройки сканера"
  scanner: PostamatScannerSortInput
  "COM принтер"
  serialPrinter: SerialPrinterSortInput
  "Настройки"
  settings: PostamatSettingsSortInput
  "Статус"
  status: SortEnumType
  tenantId: SortEnumType
  "Код доступа"
  token: SortEnumType
}

input PutPackingPlaceInPostamatInput {
  cellId: ID!
  packingPlaceIds: [ID!]!
  postamatId: ID!
}

input ReturnRequestFilterInput {
  and: [ReturnRequestFilterInput!]
  atCourierId: ComparableNullableOfGuidOperationFilterInput
  atLastMileId: ComparableNullableOfGuidOperationFilterInput
  "Причина"
  cause: StringOperationFilterInput
  changesHistory: ListFilterInputTypeOfReturnRequestStatusChangeHistoryFilterInput
  "Код"
  code: StringOperationFilterInput
  "Комментарий для курьера"
  comment: StringOperationFilterInput
  concurrencyStamp: StringOperationFilterInput
  contractorId: IdOperationFilterInput
  courierId: IdOperationFilterInput
  creationTime: ComparableDateTimeOperationFilterInput
  creatorId: ComparableNullableOfGuidOperationFilterInput
  deleterId: ComparableNullableOfGuidOperationFilterInput
  deletionTime: ComparableNullableOfDateTimeOperationFilterInput
  extraProperties: ExtraPropertyDictionaryFilterInput
  id: IdOperationFilterInput
  isDeleted: BooleanOperationFilterInput
  isLocked: BooleanOperationFilterInput
  lastModificationTime: ComparableNullableOfDateTimeOperationFilterInput
  lastModifierId: ComparableNullableOfGuidOperationFilterInput
  or: [ReturnRequestFilterInput!]
  "Статус заявки"
  status: ReturnRequestStatusFilterInput
  tenantId: ComparableNullableOfGuidOperationFilterInput
}

input ReturnRequestSortInput {
  atCourierId: SortEnumType
  atLastMileId: SortEnumType
  "Причина"
  cause: SortEnumType
  "Код"
  code: SortEnumType
  "Комментарий для курьера"
  comment: SortEnumType
  concurrencyStamp: SortEnumType
  contractorId: SortEnumType
  courierId: SortEnumType
  creationTime: SortEnumType
  creatorId: SortEnumType
  deleterId: SortEnumType
  deletionTime: SortEnumType
  id: SortEnumType
  isDeleted: SortEnumType
  isLocked: SortEnumType
  lastModificationTime: SortEnumType
  lastModifierId: SortEnumType
  "Статус заявки"
  status: ReturnRequestStatusSortInput
  tenantId: SortEnumType
}

input ReturnRequestStatusChangeHistoryFilterInput {
  and: [ReturnRequestStatusChangeHistoryFilterInput!]
  contractorId: IdOperationFilterInput
  creationTime: ComparableDateTimeOperationFilterInput
  creatorId: ComparableNullableOfGuidOperationFilterInput
  or: [ReturnRequestStatusChangeHistoryFilterInput!]
  "Статус"
  status: ReturnRequestStatusOperationFilterInput
  tenantId: ComparableNullableOfGuidOperationFilterInput
}

input ReturnRequestStatusChangeHistorySortInput {
  contractorId: SortEnumType
  creationTime: SortEnumType
  creatorId: SortEnumType
  returnRequestId: SortEnumType
  "Статус"
  status: ReturnRequestStatusSortInput
  tenantId: SortEnumType
}

"Статус заявки на возврат упаковочного места"
input ReturnRequestStatusFilterInput {
  and: [ReturnRequestStatusFilterInput!]
  name: StringOperationFilterInput
  or: [ReturnRequestStatusFilterInput!]
  value: ComparableInt32OperationFilterInput
}

input ReturnRequestStatusOperationFilterInput {
  eq: ReturnRequestStatus
  in: [ReturnRequestStatus]
  neq: ReturnRequestStatus
  nin: [ReturnRequestStatus]
}

"Статус заявки на возврат упаковочного места"
input ReturnRequestStatusSortInput {
  name: SortEnumType
  value: SortEnumType
}

input ReturnReturnRequestInput {
  id: ID!
}

input SendPackingPlaceInput {
  id: ID!
}

input SendShipmentRequestInput {
  id: ID!
}

input SerialPortSettingsFilterInput {
  and: [SerialPortSettingsFilterInput!]
  "Скорость передачи для последовательного порта (в бодах)."
  baudRate: ComparableInt32OperationFilterInput
  "Стандартное число битов данных в байте."
  dataBits: ComparableInt32OperationFilterInput
  or: [SerialPortSettingsFilterInput!]
  "Протокол контроля четности."
  parity: ParityOperationFilterInput
  "Последовательный порт, в частности, любой из доступных портов COM."
  portName: StringOperationFilterInput
  "Стандартное число стоповых битов в байте."
  stopBits: StopBitsOperationFilterInput
}

input SerialPortSettingsInput {
  """
  Скорость передачи для последовательного порта (в бодах).
  Required
  Range from 0 to 2147483647
  """
  baudRate: Int!
  """
  Стандартное число битов данных в байте.
  Required
  Range from 0 to 2147483647
  """
  dataBits: Int!
  """
  Протокол контроля четности.
  Required
  """
  parity: Parity!
  """
  Последовательный порт, в частности, любой из доступных портов COM.
  Required
  """
  portName: String!
  """
  Стандартное число стоповых битов в байте.
  Required
  """
  stopBits: StopBits!
}

input SerialPortSettingsSortInput {
  "Скорость передачи для последовательного порта (в бодах)."
  baudRate: SortEnumType
  "Стандартное число битов данных в байте."
  dataBits: SortEnumType
  "Протокол контроля четности."
  parity: SortEnumType
  "Последовательный порт, в частности, любой из доступных портов COM."
  portName: SortEnumType
  "Стандартное число стоповых битов в байте."
  stopBits: SortEnumType
}

"COM принтер"
input SerialPrinterFilterInput {
  and: [SerialPrinterFilterInput!]
  "Включен"
  isEnabled: BooleanOperationFilterInput
  or: [SerialPrinterFilterInput!]
  settings: SerialPortSettingsFilterInput
}

"COM принтер"
input SerialPrinterSortInput {
  "Включен"
  isEnabled: SortEnumType
  settings: SerialPortSettingsSortInput
}

input ShipmentRequestFilterInput {
  and: [ShipmentRequestFilterInput!]
  "Причина"
  cause: StringOperationFilterInput
  changesHistory: ListFilterInputTypeOfShipmentRequestStatusChangeHistoryFilterInput
  "Код"
  code: StringOperationFilterInput
  "Комментарий для курьера"
  comment: StringOperationFilterInput
  concurrencyStamp: StringOperationFilterInput
  contractorId: IdOperationFilterInput
  courierId: IdOperationFilterInput
  creationTime: ComparableDateTimeOperationFilterInput
  creatorId: ComparableNullableOfGuidOperationFilterInput
  deleterId: ComparableNullableOfGuidOperationFilterInput
  deletionTime: ComparableNullableOfDateTimeOperationFilterInput
  extraProperties: ExtraPropertyDictionaryFilterInput
  id: IdOperationFilterInput
  isDeleted: BooleanOperationFilterInput
  isLocked: BooleanOperationFilterInput
  lastMileId: IdOperationFilterInput
  lastModificationTime: ComparableNullableOfDateTimeOperationFilterInput
  lastModifierId: ComparableNullableOfGuidOperationFilterInput
  or: [ShipmentRequestFilterInput!]
  "Статус заявки"
  status: ShipmentRequestStatusFilterInput
  tenantId: ComparableNullableOfGuidOperationFilterInput
}

input ShipmentRequestSortInput {
  "Причина"
  cause: SortEnumType
  "Код"
  code: SortEnumType
  "Комментарий для курьера"
  comment: SortEnumType
  concurrencyStamp: SortEnumType
  contractorId: SortEnumType
  courierId: SortEnumType
  creationTime: SortEnumType
  creatorId: SortEnumType
  deleterId: SortEnumType
  deletionTime: SortEnumType
  id: SortEnumType
  isDeleted: SortEnumType
  isLocked: SortEnumType
  lastMileId: SortEnumType
  lastModificationTime: SortEnumType
  lastModifierId: SortEnumType
  "Статус заявки"
  status: ShipmentRequestStatusSortInput
  tenantId: SortEnumType
}

input ShipmentRequestStatusChangeHistoryFilterInput {
  and: [ShipmentRequestStatusChangeHistoryFilterInput!]
  contractorId: IdOperationFilterInput
  creationTime: ComparableDateTimeOperationFilterInput
  creatorId: ComparableNullableOfGuidOperationFilterInput
  or: [ShipmentRequestStatusChangeHistoryFilterInput!]
  "Статус"
  status: ShipmentRequestStatusOperationFilterInput
  tenantId: ComparableNullableOfGuidOperationFilterInput
}

input ShipmentRequestStatusChangeHistorySortInput {
  contractorId: SortEnumType
  creationTime: SortEnumType
  creatorId: SortEnumType
  shipmentRequestId: SortEnumType
  "Статус"
  status: ShipmentRequestStatusSortInput
  tenantId: SortEnumType
}

"Статус заявки на отправку упаковочных мест в последнюю милю"
input ShipmentRequestStatusFilterInput {
  and: [ShipmentRequestStatusFilterInput!]
  name: StringOperationFilterInput
  or: [ShipmentRequestStatusFilterInput!]
  value: ComparableInt32OperationFilterInput
}

input ShipmentRequestStatusOperationFilterInput {
  eq: ShipmentRequestStatus
  in: [ShipmentRequestStatus]
  neq: ShipmentRequestStatus
  nin: [ShipmentRequestStatus]
}

"Статус заявки на отправку упаковочных мест в последнюю милю"
input ShipmentRequestStatusSortInput {
  name: SortEnumType
  value: SortEnumType
}

input SizeFilterInput {
  and: [SizeFilterInput!]
  concurrencyStamp: StringOperationFilterInput
  creationTime: ComparableDateTimeOperationFilterInput
  creatorId: ComparableNullableOfGuidOperationFilterInput
  deleterId: ComparableNullableOfGuidOperationFilterInput
  deletionTime: ComparableNullableOfDateTimeOperationFilterInput
  extraProperties: ExtraPropertyDictionaryFilterInput
  id: IdOperationFilterInput
  isDeleted: BooleanOperationFilterInput
  lastModificationTime: ComparableNullableOfDateTimeOperationFilterInput
  lastModifierId: ComparableNullableOfGuidOperationFilterInput
  name: StringOperationFilterInput
  or: [SizeFilterInput!]
  tenantId: ComparableNullableOfGuidOperationFilterInput
}

input SizeSortInput {
  concurrencyStamp: SortEnumType
  creationTime: SortEnumType
  creatorId: SortEnumType
  deleterId: SortEnumType
  deletionTime: SortEnumType
  id: SortEnumType
  isDeleted: SortEnumType
  lastModificationTime: SortEnumType
  lastModifierId: SortEnumType
  name: SortEnumType
  tenantId: SortEnumType
}

"Смс аккаунт"
input SmsAccountFilterInput {
  and: [SmsAccountFilterInput!]
  concurrencyStamp: StringOperationFilterInput
  contractorId: IdOperationFilterInput
  creationTime: ComparableDateTimeOperationFilterInput
  creatorId: ComparableNullableOfGuidOperationFilterInput
  deleterId: ComparableNullableOfGuidOperationFilterInput
  deletionTime: ComparableNullableOfDateTimeOperationFilterInput
  extraProperties: ExtraPropertyDictionaryFilterInput
  id: IdOperationFilterInput
  isDeleted: BooleanOperationFilterInput
  lastModificationTime: ComparableNullableOfDateTimeOperationFilterInput
  lastModifierId: ComparableNullableOfGuidOperationFilterInput
  "Наименование аккаунта"
  name: StringOperationFilterInput
  or: [SmsAccountFilterInput!]
  "Имя отправителя"
  sender: StringOperationFilterInput
  tenantId: ComparableNullableOfGuidOperationFilterInput
}

"Смс аккаунт"
input SmsAccountSortInput {
  concurrencyStamp: SortEnumType
  contractorId: SortEnumType
  creationTime: SortEnumType
  creatorId: SortEnumType
  deleterId: SortEnumType
  deletionTime: SortEnumType
  id: SortEnumType
  isDeleted: SortEnumType
  lastModificationTime: SortEnumType
  lastModifierId: SortEnumType
  "Наименование аккаунта"
  name: SortEnumType
  "Имя отправителя"
  sender: SortEnumType
  tenantId: SortEnumType
}

"Аккаунт от сервиса https://smsc.ru"
input SmsCenterAccountFilterInput {
  and: [SmsCenterAccountFilterInput!]
  concurrencyStamp: StringOperationFilterInput
  contractorId: IdOperationFilterInput
  creationTime: ComparableDateTimeOperationFilterInput
  creatorId: ComparableNullableOfGuidOperationFilterInput
  deleterId: ComparableNullableOfGuidOperationFilterInput
  deletionTime: ComparableNullableOfDateTimeOperationFilterInput
  extraProperties: ExtraPropertyDictionaryFilterInput
  id: IdOperationFilterInput
  isDeleted: BooleanOperationFilterInput
  lastModificationTime: ComparableNullableOfDateTimeOperationFilterInput
  lastModifierId: ComparableNullableOfGuidOperationFilterInput
  "Логин"
  login: StringOperationFilterInput
  "Наименование аккаунта"
  name: StringOperationFilterInput
  or: [SmsCenterAccountFilterInput!]
  "Пароль"
  password: StringOperationFilterInput
  "Имя отправителя"
  sender: StringOperationFilterInput
  tenantId: ComparableNullableOfGuidOperationFilterInput
}

"Аккаунт от сервиса https://smsc.ru"
input SmsCenterAccountSortInput {
  concurrencyStamp: SortEnumType
  contractorId: SortEnumType
  creationTime: SortEnumType
  creatorId: SortEnumType
  deleterId: SortEnumType
  deletionTime: SortEnumType
  id: SortEnumType
  isDeleted: SortEnumType
  lastModificationTime: SortEnumType
  lastModifierId: SortEnumType
  "Логин"
  login: SortEnumType
  "Наименование аккаунта"
  name: SortEnumType
  "Пароль"
  password: SortEnumType
  "Имя отправителя"
  sender: SortEnumType
  tenantId: SortEnumType
}

input SmsMessageFilterInput {
  accountId: IdOperationFilterInput
  and: [SmsMessageFilterInput!]
  concurrencyStamp: StringOperationFilterInput
  contractorId: IdOperationFilterInput
  creationTime: ComparableDateTimeOperationFilterInput
  creatorId: ComparableNullableOfGuidOperationFilterInput
  deleterId: ComparableNullableOfGuidOperationFilterInput
  deletionTime: ComparableNullableOfDateTimeOperationFilterInput
  "Ошибка при отправке"
  error: StringOperationFilterInput
  extraProperties: ExtraPropertyDictionaryFilterInput
  id: IdOperationFilterInput
  isDeleted: BooleanOperationFilterInput
  "Успешно ли отправлено"
  isSuccess: BooleanOperationFilterInput
  lastModificationTime: ComparableNullableOfDateTimeOperationFilterInput
  lastModifierId: ComparableNullableOfGuidOperationFilterInput
  or: [SmsMessageFilterInput!]
  "Номер телефона"
  phoneNumber: StringOperationFilterInput
  tenantId: ComparableNullableOfGuidOperationFilterInput
  "Текст"
  text: StringOperationFilterInput
  "Время когда было отправлено"
  timeDispatch: ComparableNullableOfDateTimeOperationFilterInput
}

input SmsMessageSortInput {
  accountId: SortEnumType
  concurrencyStamp: SortEnumType
  contractorId: SortEnumType
  creationTime: SortEnumType
  creatorId: SortEnumType
  deleterId: SortEnumType
  deletionTime: SortEnumType
  "Ошибка при отправке"
  error: SortEnumType
  id: SortEnumType
  isDeleted: SortEnumType
  "Успешно ли отправлено"
  isSuccess: SortEnumType
  lastModificationTime: SortEnumType
  lastModifierId: SortEnumType
  "Номер телефона"
  phoneNumber: SortEnumType
  tenantId: SortEnumType
  "Текст"
  text: SortEnumType
  "Время когда было отправлено"
  timeDispatch: SortEnumType
}

"Смс шаблон"
input SmsTemplateFilterInput {
  and: [SmsTemplateFilterInput!]
  "Комментарий"
  comment: StringOperationFilterInput
  concurrencyStamp: StringOperationFilterInput
  contractorId: IdOperationFilterInput
  creationTime: ComparableDateTimeOperationFilterInput
  creatorId: ComparableNullableOfGuidOperationFilterInput
  deleterId: ComparableNullableOfGuidOperationFilterInput
  deletionTime: ComparableNullableOfDateTimeOperationFilterInput
  eventType: NotificationEventTypeOperationFilterInput
  extraProperties: ExtraPropertyDictionaryFilterInput
  id: IdOperationFilterInput
  isDeleted: BooleanOperationFilterInput
  lastModificationTime: ComparableNullableOfDateTimeOperationFilterInput
  lastModifierId: ComparableNullableOfGuidOperationFilterInput
  "Наименование шаблона"
  name: StringOperationFilterInput
  or: [SmsTemplateFilterInput!]
  "Шаблон"
  template: StringOperationFilterInput
  tenantId: ComparableNullableOfGuidOperationFilterInput
}

"Смс шаблон"
input SmsTemplateSortInput {
  "Комментарий"
  comment: SortEnumType
  concurrencyStamp: SortEnumType
  contractorId: SortEnumType
  creationTime: SortEnumType
  creatorId: SortEnumType
  deleterId: SortEnumType
  deletionTime: SortEnumType
  eventType: SortEnumType
  id: SortEnumType
  isDeleted: SortEnumType
  lastModificationTime: SortEnumType
  lastModifierId: SortEnumType
  "Наименование шаблона"
  name: SortEnumType
  "Шаблон"
  template: SortEnumType
  tenantId: SortEnumType
}

input StopBitsOperationFilterInput {
  eq: StopBits
  in: [StopBits!]
  neq: StopBits
  nin: [StopBits!]
}

input StringOperationFilterInput {
  and: [StringOperationFilterInput!]
  contains: String
  endsWith: String
  eq: String
  in: [String]
  ncontains: String
  nendsWith: String
  neq: String
  nin: [String]
  nstartsWith: String
  or: [StringOperationFilterInput!]
  startsWith: String
}

"Шаблон ячейки"
input TemplateCellFilterInput {
  and: [TemplateCellFilterInput!]
  concurrencyStamp: StringOperationFilterInput
  creationTime: ComparableDateTimeOperationFilterInput
  creatorId: ComparableNullableOfGuidOperationFilterInput
  deleterId: ComparableNullableOfGuidOperationFilterInput
  deletionTime: ComparableNullableOfDateTimeOperationFilterInput
  extraProperties: ExtraPropertyDictionaryFilterInput
  "Высота"
  height: ComparableInt32OperationFilterInput
  id: IdOperationFilterInput
  "Ссылка на изображение"
  imageUrl: StringOperationFilterInput
  "Тип шаблона"
  isCell: BooleanOperationFilterInput
  isDeleted: BooleanOperationFilterInput
  lastModificationTime: ComparableNullableOfDateTimeOperationFilterInput
  lastModifierId: ComparableNullableOfGuidOperationFilterInput
  "Наименование"
  name: StringOperationFilterInput
  or: [TemplateCellFilterInput!]
  sizeId: ComparableNullableOfGuidOperationFilterInput
  tenantId: ComparableNullableOfGuidOperationFilterInput
  "Ширина"
  width: ComparableInt32OperationFilterInput
}

"Шаблон ячейки"
input TemplateCellSortInput {
  concurrencyStamp: SortEnumType
  creationTime: SortEnumType
  creatorId: SortEnumType
  deleterId: SortEnumType
  deletionTime: SortEnumType
  "Высота"
  height: SortEnumType
  id: SortEnumType
  "Ссылка на изображение"
  imageUrl: SortEnumType
  "Тип шаблона"
  isCell: SortEnumType
  isDeleted: SortEnumType
  lastModificationTime: SortEnumType
  lastModifierId: SortEnumType
  "Наименование"
  name: SortEnumType
  sizeId: SortEnumType
  tenantId: SortEnumType
  "Ширина"
  width: SortEnumType
}

"Шаблон постамата"
input TemplatePostamatFilterInput {
  and: [TemplatePostamatFilterInput!]
  concurrencyStamp: StringOperationFilterInput
  creationTime: ComparableDateTimeOperationFilterInput
  creatorId: ComparableNullableOfGuidOperationFilterInput
  deleterId: ComparableNullableOfGuidOperationFilterInput
  deletionTime: ComparableNullableOfDateTimeOperationFilterInput
  extraProperties: ExtraPropertyDictionaryFilterInput
  id: IdOperationFilterInput
  isDeleted: BooleanOperationFilterInput
  lastModificationTime: ComparableNullableOfDateTimeOperationFilterInput
  lastModifierId: ComparableNullableOfGuidOperationFilterInput
  "Наименование"
  name: StringOperationFilterInput
  or: [TemplatePostamatFilterInput!]
  "Ид шаблонов секций"
  sections: ListFilterInputTypeOfTemplatePostamatTemplateSectionFilterInput
  tenantId: ComparableNullableOfGuidOperationFilterInput
}

"Шаблон постамата"
input TemplatePostamatSortInput {
  concurrencyStamp: SortEnumType
  creationTime: SortEnumType
  creatorId: SortEnumType
  deleterId: SortEnumType
  deletionTime: SortEnumType
  id: SortEnumType
  isDeleted: SortEnumType
  lastModificationTime: SortEnumType
  lastModifierId: SortEnumType
  "Наименование"
  name: SortEnumType
  tenantId: SortEnumType
}

input TemplatePostamatTemplateSectionFilterInput {
  and: [TemplatePostamatTemplateSectionFilterInput!]
  or: [TemplatePostamatTemplateSectionFilterInput!]
  "Позиция"
  position: ComparableInt32OperationFilterInput
  templatePostamatId: IdOperationFilterInput
  templateSectionId: IdOperationFilterInput
  tenantId: ComparableNullableOfGuidOperationFilterInput
}

input TemplatePostamatTemplateSectionInput {
  """
  Позиция
  Required
  Range from 0 to 2147483647
  """
  position: Int!
  """
  Required
  """
  templateSectionId: ID!
}

"Шаблон секции"
input TemplateSectionFilterInput {
  and: [TemplateSectionFilterInput!]
  "Ид шаблонов ячеек"
  cells: ListFilterInputTypeOfTemplateSectionTemplateCellFilterInput
  concurrencyStamp: StringOperationFilterInput
  creationTime: ComparableDateTimeOperationFilterInput
  creatorId: ComparableNullableOfGuidOperationFilterInput
  deleterId: ComparableNullableOfGuidOperationFilterInput
  deletionTime: ComparableNullableOfDateTimeOperationFilterInput
  extraProperties: ExtraPropertyDictionaryFilterInput
  id: IdOperationFilterInput
  isDeleted: BooleanOperationFilterInput
  lastModificationTime: ComparableNullableOfDateTimeOperationFilterInput
  lastModifierId: ComparableNullableOfGuidOperationFilterInput
  "Наименование"
  name: StringOperationFilterInput
  or: [TemplateSectionFilterInput!]
  tenantId: ComparableNullableOfGuidOperationFilterInput
}

"Шаблон секции"
input TemplateSectionSortInput {
  concurrencyStamp: SortEnumType
  creationTime: SortEnumType
  creatorId: SortEnumType
  deleterId: SortEnumType
  deletionTime: SortEnumType
  id: SortEnumType
  isDeleted: SortEnumType
  lastModificationTime: SortEnumType
  lastModifierId: SortEnumType
  "Наименование"
  name: SortEnumType
  tenantId: SortEnumType
}

input TemplateSectionTemplateCellFilterInput {
  and: [TemplateSectionTemplateCellFilterInput!]
  or: [TemplateSectionTemplateCellFilterInput!]
  "Позиция"
  position: ComparableInt32OperationFilterInput
  templateCellId: IdOperationFilterInput
  templateSectionId: IdOperationFilterInput
  tenantId: ComparableNullableOfGuidOperationFilterInput
}

input TemplateSectionTemplateCellInput {
  """
  Позиция
  Required
  Range from 0 to 2147483647
  """
  position: Int!
  """
  Required
  """
  templateCellId: ID!
}

input TenantConnectionStringFilterInput {
  and: [TenantConnectionStringFilterInput!]
  name: StringOperationFilterInput
  or: [TenantConnectionStringFilterInput!]
  tenantId: IdOperationFilterInput
  value: StringOperationFilterInput
}

input TenantFilterInput {
  and: [TenantFilterInput!]
  concurrencyStamp: StringOperationFilterInput
  connectionStrings: ListFilterInputTypeOfTenantConnectionStringFilterInput
  creationTime: ComparableDateTimeOperationFilterInput
  creatorId: ComparableNullableOfGuidOperationFilterInput
  deleterId: ComparableNullableOfGuidOperationFilterInput
  deletionTime: ComparableNullableOfDateTimeOperationFilterInput
  extraProperties: ExtraPropertyDictionaryFilterInput
  id: IdOperationFilterInput
  isDeleted: BooleanOperationFilterInput
  lastModificationTime: ComparableNullableOfDateTimeOperationFilterInput
  lastModifierId: ComparableNullableOfGuidOperationFilterInput
  name: StringOperationFilterInput
  or: [TenantFilterInput!]
}

input TenantSortInput {
  concurrencyStamp: SortEnumType
  creationTime: SortEnumType
  creatorId: SortEnumType
  deleterId: SortEnumType
  deletionTime: SortEnumType
  id: SortEnumType
  isDeleted: SortEnumType
  lastModificationTime: SortEnumType
  lastModifierId: SortEnumType
  name: SortEnumType
}

input TypeCellOperationFilterInput {
  eq: TypeCell
  in: [TypeCell!]
  neq: TypeCell
  nin: [TypeCell!]
}

input TypeOrderFilterInput {
  and: [TypeOrderFilterInput!]
  name: StringOperationFilterInput
  or: [TypeOrderFilterInput!]
  value: ComparableInt32OperationFilterInput
}

input TypeOrderOperationFilterInput {
  eq: TypeOrder
  in: [TypeOrder]
  neq: TypeOrder
  nin: [TypeOrder]
}

input TypeOrderSortInput {
  name: SortEnumType
  value: SortEnumType
}

input UpdateAccessKeyInput {
  """
  Required
  Max Length: 100
  """
  barcode: String!
  expiresDt: DateTime
  """
  Required
  """
  id: ID!
  isDisposable: Boolean!
  """
  Required
  """
  lastMileId: ID!
}

input UpdateCellInput {
  """
  ШК
  Required
  Max Length: 50
  """
  barcode: String!
  """
  Required
  """
  cellId: ID!
  """
  Наименование
  Required
  Max Length: 50
  """
  name: String!
  """
  Max Length: 6
  """
  pinCode: String
  """
  Required
  """
  postamatId: ID!
  """
  Max Length: 6
  """
  servicePinCode: String
}

"Компания"
input UpdateCompanyInput {
  """
  Реквизиты банковского счета
  Required
  """
  accountBank: AccountBankInput!
  """
  Фактический адрес
  Max Length: 200
  """
  actualAddress: String
  """
  Адрес
  Required
  Max Length: 200
  """
  address: String!
  """
  Required
  """
  id: ID!
  """
  ИНН - Индивидуальный номер налогоплательщика
  Required
  Length: 10
  """
  inn: String!
  """
  КПП - Код причины постановки
  Length: 9
  """
  kpp: String
  """
  Почтовый адрес
  Max Length: 200
  """
  mailingAddress: String
  """
  Наименование
  Required
  Max Length: 100
  """
  name: String!
  """
  ОГРН - Основной государственный регистрационный номер
  Length: 13
  """
  ogrn: String
  """
  Код ОКПО - Код в Общероссийском классификаторе предприятий и организаций
  Length: 8
  """
  okpo: String
}

input UpdateEmexAccountInput {
  """
  Required
  """
  id: ID!
  """
  Наименование
  Required
  Max Length: 100
  """
  name: String!
  """
  Required
  Range from 0 to 1,7976931348623157E+308
  """
  userId: Long!
}

input UpdateEmexOrderInput {
  """
  Клиент
  Required
  """
  customer: EmexCustomerInput!
  """
  Внешний ID заказа
  Required
  """
  externalId: String!
  """
  Идентификатор движения Emex
  Required
  Range from 0 to 1,7976931348623157E+308
  """
  globalId: Long!
  """
  Required
  """
  id: ID!
}

input UpdateEmexProductInput {
  orderId: ID!
  product: EmexProductInput!
  productId: ID!
}

input UpdateEmployeeInput {
  """
  Контрагенты
  Required
  Min Length: 1
  """
  contractorIds: [ID!]!
  """
  Имя
  Required
  Max Length: 200
  """
  firstName: String!
  """
  Required
  """
  id: ID!
  """
  Отчество
  Max Length: 200
  """
  middleName: String
  """
  Номер телефона
  Required
  Min Length: 3
  Max Length: 32
  """
  phoneNumber: String!
  """
  Роли
  Required
  Min Length: 1
  """
  roleIds: [ID!]!
  """
  Фамилия
  Required
  Max Length: 200
  """
  surname: String!
}

input UpdateIdentityRoleInput {
  """
  Required
  """
  concurrencyStamp: String!
  """
  Required
  """
  id: ID!
  """
  Required
  """
  isDefault: Boolean!
  """
  Required
  """
  isPublic: Boolean!
  """
  Required
  Max Length: 256
  """
  name: String!
}

"Индивидуальный предприниматель"
input UpdateIndividualEntrepreneurInput {
  """
  Реквизиты банковского счета
  Required
  """
  accountBank: AccountBankInput!
  """
  Фактический адрес
  Max Length: 200
  """
  actualAddress: String
  """
  Адрес
  Required
  Max Length: 200
  """
  address: String!
  """
  Required
  """
  id: ID!
  """
  ИНН - Индивидуальный номер налогоплательщика
  Required
  Length: 12
  """
  inn: String!
  """
  Почтовый адрес
  Max Length: 200
  """
  mailingAddress: String
  """
  Наименование
  Required
  Max Length: 100
  """
  name: String!
  """
  ОГРНИП - Основной государственный регистрационный номер индивидуального предпринимателя
  Length: 15
  """
  ogrnip: String
  """
  Код ОКПО - Код в Общероссийском классификаторе предприятий и организаций
  Length: 10
  """
  okpo: String
}

input UpdateLastMileAccountsInput {
  emexAccountId: ID
  """
  Required
  """
  lastMileId: ID!
  smsAccountId: ID
}

input UpdateLastMileReturnPeriodInput {
  """
  Required
  """
  lastMileId: ID!
  """
  Required
  Range from 0 to 2147483647
  """
  period: Int!
  """
  Required
  """
  typeOrder: TypeOrder!
}

input UpdateLastMileSmsTemplateInput {
  """
  Required
  """
  eventType: NotificationEventType!
  """
  Required
  """
  lastMileId: ID!
  """
  Required
  """
  smsTemplateId: ID!
  """
  Required
  """
  typeOrder: TypeOrder!
}

input UpdateLastMileStoragePeriodInput {
  """
  Required
  """
  lastMileId: ID!
  """
  Required
  Range from 0 to 2147483647
  """
  period: Int!
  """
  Required
  """
  typeOrder: TypeOrder!
}

input UpdatePackingPlaceInput {
  """
  Required
  Max Length: 255
  """
  barcode: String!
  courierId: ID
  """
  Required
  """
  id: ID!
  lastMileId: ID
  sizeId: ID
}

input UpdatePermissionDtoInput {
  isGranted: Boolean!
  name: String
}

input UpdatePermissionsDtoInput {
  permissions: [UpdatePermissionDtoInput]
}

input UpdatePermissionsInput {
  """
  Required
  """
  permissions: UpdatePermissionsDtoInput!
  """
  Required
  """
  providerKey: String!
  """
  Required
  """
  providerName: String!
}

input UpdatePostamatDisplayInput {
  """
  Required
  Min Length: 1
  """
  cellDisplays: [CellDisplayInput!]!
  postamatId: ID!
}

input UpdatePostamatFilePrinterInput {
  """
  Путь к файлу
  Required
  """
  filePath: String!
  """
  Включен
  """
  isEnabled: Boolean!
  """
  Required
  """
  postamatId: ID!
}

input UpdatePostamatInput {
  """
  Адрес
  Required
  Max Length: 200
  """
  address: String!
  defaultCourierId: ID!
  """
  Внешний ID
  Required
  Max Length: 200
  """
  externalId: String!
  """
  Заводской номер
  Required
  Max Length: 100
  """
  factoryNumber: String!
  """
  Required
  """
  id: ID!
  """
  Наименование
  Required
  Max Length: 255
  """
  name: String!
}

input UpdatePostamatNetworkPrinterInput {
  """
  IP адрес
  Required
  """
  ipAddress: String!
  """
  Включен
  """
  isEnabled: Boolean!
  """
  Порт
  Required
  Range from 0 to 2147483647
  """
  port: Int!
  """
  Required
  """
  postamatId: ID!
  """
  Циклическое подключение
  """
  reconnectOnTimeout: Boolean!
}

input UpdatePostamatScannerInput {
  """
  Скорость передачи для последовательного порта (в бодах).
  Required
  Range from 0 to 2147483647
  """
  baudRate: Int!
  """
  Стандартное число битов данных в байте.
  Required
  Range from 0 to 2147483647
  """
  dataBits: Int!
  """
  Required
  """
  id: ID!
  """
  Протокол контроля четности.
  Required
  """
  parity: Parity!
  """
  Последовательный порт, в частности, любой из доступных портов COM.
  Required
  """
  portName: String!
  """
  Стандартное число стоповых битов в байте.
  Required
  """
  stopBits: StopBits!
}

input UpdatePostamatSerialPrinterInput {
  """
  Скорость передачи для последовательного порта (в бодах).
  Required
  Range from 0 to 2147483647
  """
  baudRate: Int!
  """
  Стандартное число битов данных в байте.
  Required
  Range from 0 to 2147483647
  """
  dataBits: Int!
  """
  Включен
  """
  isEnabled: Boolean!
  """
  Протокол контроля четности.
  Required
  """
  parity: Parity!
  """
  Последовательный порт, в частности, любой из доступных портов COM.
  Required
  """
  portName: String!
  """
  Required
  """
  postamatId: ID!
  """
  Стандартное число стоповых битов в байте.
  Required
  """
  stopBits: StopBits!
}

input UpdatePostamatSettingsInput {
  """
  Телефон администратора
  """
  adminPhone: String
  """
  Required
  """
  id: ID!
  """
  Авто обновление
  """
  isAutoUpdate: Boolean!
  """
  Прием только по списку ожидания.
  """
  receptionWaitingListOnly: Boolean!
}

input UpdatePromixControllerInput {
  """
  Required
  """
  controllerId: ID!
  """
  Наименование
  Required
  Max Length: 100
  """
  name: String!
  """
  Required
  """
  postamatId: ID!
  """
  Настройки serial port
  Required
  """
  settings: SerialPortSettingsInput!
}

input UpdateReturnRequestInput {
  """
  Комментарий для курьера
  Max Length: 255
  """
  comment: String
  """
  Required
  """
  courierId: ID!
  """
  Required
  """
  id: ID!
}

input UpdateShipmentRequestInput {
  """
  Комментарий для курьера
  Max Length: 255
  """
  comment: String
  """
  Required
  """
  courierId: ID!
  """
  Required
  """
  id: ID!
}

input UpdateSizeInput {
  """
  Required
  """
  id: ID!
  """
  Наименование
  Required
  Max Length: 255
  """
  name: String!
}

input UpdateSmsCenterAccountInput {
  """
  Required
  """
  id: ID!
  """
  Логин
  Required
  Max Length: 100
  """
  login: String!
  """
  Наименование аккаунта
  Required
  Max Length: 100
  """
  name: String!
  """
  Имя отправителя
  Required
  Max Length: 50
  """
  sender: String!
}

"Смс шаблон"
input UpdateSmsTemplateInput {
  """
  Комментарий
  Max Length: 200
  """
  comment: String
  """
  Required
  """
  id: ID!
  """
  Наименование шаблона
  Required
  Max Length: 200
  """
  name: String!
  """
  Шаблон
  Required
  Max Length: 200
  """
  template: String!
}

input UpdateTemplateCellInput {
  """
  Required
  """
  id: ID!
  """
  Наименование
  Required
  Max Length: 50
  """
  name: String!
  sizeId: ID
}

input UpdateTemplatePostamatInput {
  """
  Required
  """
  id: ID!
  """
  Наименование
  Required
  Max Length: 50
  """
  name: String!
}

input UpdateTemplateSectionInput {
  """
  Required
  """
  id: ID!
  """
  Наименование
  Required
  Max Length: 50
  """
  name: String!
}

input UpdateTenantInput {
  """
  Required
  """
  emailForDocuments: String!
  """
  Required
  """
  id: ID!
  """
  Required
  Max Length: 256
  """
  name: String!
}

input UpdateTopologyInput {
  postamatId: ID!
  """
  Max Length: 20
  """
  prefixBarcode: String
  """
  Max Length: 20
  """
  prefixName: String
  templatePostamatId: ID
}
